{"version":3,"file":"static/js/191.d17ce7cc.chunk.js","mappings":"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","sources":["hooks/usePostsActions.ts","redux/api/extendedCollectionsApi.ts","redux/api/extendedPostsApi.ts","redux/utils.ts","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport extendedCollectionsApi from \"../redux/api/extendedCollectionsApi\";\r\nimport extendedPostsApi from \"../redux/api/extendedPostsApi\";\r\nimport {IPost, ISavesInfo} from \"../types/post\";\r\n\r\nexport interface IUsePostsProps {\r\n    initPosts: IPost[] | undefined,\r\n}\r\n\r\nexport type toggleLikeType = (id: string, isLiked: boolean) => Promise<void>\r\nexport type toggleSaveType = (postId: string, collectionId: string, isSaved: boolean) => Promise<void>\r\nexport type updateSavesInfo = (title: string, collectionId: string, postId: string) => Promise<void>\r\n\r\nexport interface IPostsActions {\r\n    readonly toggleLike: toggleLikeType,\r\n    readonly toggleSave: toggleSaveType,\r\n    readonly updateSavesInfo: updateSavesInfo\r\n}\r\n\r\nexport type usePostsActionsReturnValue = readonly [IPost[], IPostsActions]\r\n\r\nconst usePostsActions = ({initPosts}: IUsePostsProps): usePostsActionsReturnValue => {\r\n    const [unlikePost] = extendedPostsApi.useUnlikeOneByIdMutation()\r\n    const [likePost] = extendedPostsApi.useLikeOneByIdMutation()\r\n    const [unsavePost] = extendedCollectionsApi.useDeletePostFromCollectionMutation()\r\n    const [savePost] = extendedCollectionsApi.useSavePostInCollectionMutation()\r\n\r\n    const [posts, setPosts] = useState([] as IPost[]);\r\n\r\n    useEffect(() => {\r\n        if (initPosts) {\r\n            setPosts(initPosts)\r\n        }\r\n    }, [initPosts?.length]);\r\n\r\n    const toggleLike = async (id: string, isLiked: boolean) => {\r\n        try {\r\n            if (isLiked) {\r\n                await unlikePost({id}).unwrap()\r\n            } else {\r\n                await likePost({id}).unwrap()\r\n            }\r\n\r\n            setPosts(prev => prev.map((post) => {\r\n                    if (post._id === id) {\r\n                        let {likesCount: initLikesCount, isLiked} = post\r\n\r\n                        const likesCount = isLiked ? --initLikesCount : ++initLikesCount\r\n\r\n                        return {...post, isLiked: !isLiked, likesCount}\r\n                    } else {\r\n                        return post\r\n                    }\r\n                })\r\n            )\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const toggleSave = async (postId: string, collectionId: string, isSaved: boolean) => {\r\n        try {\r\n            if (isSaved) {\r\n                await unsavePost({postId, collectionId}).unwrap()\r\n            } else {\r\n                await savePost({postId, collectionId}).unwrap()\r\n            }\r\n\r\n            setPosts(prev => prev.map((post) => {\r\n                    if (post._id === postId) {\r\n                        let {savesCount, savesInfo} = post\r\n\r\n                        const changedSavesInfo = savesInfo.map((info) => {\r\n                            if (info.collectionId === collectionId) {\r\n                                return {isSaved: !isSaved, collectionId: info.collectionId, title: info.title}\r\n                            }\r\n                            return info\r\n                        })\r\n\r\n                        const isSomewhereSaved = changedSavesInfo.some(({isSaved}) => !!isSaved)\r\n\r\n                        return {...post, isSomewhereSaved, savesCount, savesInfo: changedSavesInfo}\r\n                    } else {\r\n                        return post\r\n                    }\r\n                })\r\n            )\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const updateSavesInfo = async (title: string, collectionId: string, postId: string) => {\r\n        try {\r\n            await savePost({postId, collectionId}).unwrap()\r\n\r\n            setPosts(prev => prev.map((post) => {\r\n                if (post._id === postId) {\r\n                    return {...post, isSomewhereSaved: true, savesInfo: [...post.savesInfo, {title, collectionId, isSaved: true}]}\r\n                }\r\n\r\n                return {...post, savesInfo: [...post.savesInfo, {title, collectionId, isSaved: false}]}\r\n            }))\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n\r\n    return [posts, {toggleLike, toggleSave, updateSavesInfo}] as const\r\n}\r\n\r\nexport default usePostsActions","import {ICollection, IFullCollection} from \"../../types/collection\";\r\nimport {IResponse, IResponseWithMessage} from \"../slices/userSlice\";\r\nimport {ICollectionForIUser} from \"../../types/user\";\r\nimport {returnTransformedError} from \"../utils\";\r\nimport {idType, rootApi} from \"./rootApi\";\r\n\r\nconst extendedCollectionsApi = rootApi.injectEndpoints({\r\n    endpoints: (build) => ({\r\n        getOneWithPostsAndAuthor: build.query<IFullCollection, idType>({\r\n            query: ({id}) => ({\r\n                url: `/collections/${id}`,\r\n            }),\r\n            transformResponse: (response: IResponse<IFullCollection>) => response.data,\r\n            providesTags: ['Collection']\r\n        }),\r\n        getCollectionsByUserId: build.query<ICollectionForIUser[], idType>({\r\n            query: ({id}) => ({\r\n                url: `/users/${id}/collections`\r\n            }),\r\n            transformResponse: (response: IResponse<{ collections: ICollectionForIUser[] }>) => response.data.collections,\r\n        }),\r\n        searchCollections: build.query<ICollectionForIUser[], {title: string}>({\r\n            query: ({title}) => ({\r\n                url: `/collections/search`,\r\n                params: {\r\n                    title\r\n                }\r\n            }),\r\n            transformResponse: (response: IResponse<{ collections: ICollectionForIUser[] }>) => response.data.collections,\r\n        }),\r\n        getAllowedToViewCollections: build.query<ICollectionForIUser[], idType>({\r\n            query: ({id}) => ({\r\n                url: `/users/${id}/allowedToViewCollections`\r\n            }),\r\n            transformResponse: (response: IResponse<{ allowedToViewCollections: ICollectionForIUser[] }>) => response.data.allowedToViewCollections,\r\n        }),\r\n        getCurrentUserCollections: build.query<ICollection[], void>({\r\n            query: () => ({\r\n                url: `/collections/current`,\r\n            }),\r\n            transformResponse: (response: IResponse<{ collections: ICollection[] }>) => response.data.collections,\r\n            providesTags: ['Collection']\r\n        }),\r\n        createCollection: build.mutation<IResponseWithMessage<{ collection: ICollection }>, {\r\n            body: {\r\n                tags: string[],\r\n                title: string\r\n            }\r\n        }>({\r\n            query: ({body}) => ({\r\n                url: `/collections`,\r\n                method: 'POST',\r\n                body,\r\n            }),\r\n            transformErrorResponse: returnTransformedError\r\n        }),\r\n        deleteCollection: build.mutation<unknown, idType>({\r\n            query: ({id}) => ({\r\n                url: `/collections/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            transformErrorResponse: returnTransformedError,\r\n        }),\r\n        savePostInCollection: build.mutation<unknown, { collectionId: string, postId: string }>({\r\n            query: ({collectionId, postId}) => ({\r\n                url: `/collections/${collectionId}/saves/${postId}`,\r\n                method: 'POST',\r\n            }),\r\n            transformErrorResponse: returnTransformedError,\r\n        }),\r\n        deletePostFromCollection: build.mutation<unknown, { collectionId: string, postId: string }>({\r\n            query: ({collectionId, postId}) => ({\r\n                url: `/collections/${collectionId}/saves/${postId}`,\r\n                method: 'DELETE',\r\n            }),\r\n            transformErrorResponse: returnTransformedError\r\n        }),\r\n        addAuthorToCollection: build.mutation<unknown, { collectionId: string, authorId: string, role: 'ADMIN' | 'AUTHOR' }>({\r\n            query: ({collectionId, authorId, role}) => ({\r\n                url: `/collections/${collectionId}/authors/${authorId}`,\r\n                method: `POST`,\r\n                params: {\r\n                    role\r\n                }\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        addViewerToCollection: build.mutation<unknown, { collectionId: string, viewerId: string }>({\r\n            query: ({collectionId, viewerId}) => ({\r\n                url: `/collections/${collectionId}/viewers/${viewerId}`,\r\n                method: `POST`,\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        sendRequestToJoinToCollection: build.mutation<unknown, {collectionId: string}>({\r\n            query: ({collectionId}) => ({\r\n                url: `/collections/${collectionId}/requests`,\r\n                method: 'POST'\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        unsendRequestToJoinFromCollection: build.mutation<unknown, {collectionId: string}>({\r\n            query: ({collectionId}) => ({\r\n                url: `/collections/${collectionId}/requests`,\r\n                method: 'DELETE'\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        changeAuthorRoleInCollection: build.mutation<unknown, { collectionId: string, authorId: string, role: 'ADMIN' | 'AUTHOR' }>({\r\n            query: ({collectionId, authorId, role}) => ({\r\n                url: `/collections/${collectionId}/authors/${authorId}/roles`,\r\n                method: `PATCH`,\r\n                params: {\r\n                    role\r\n                }\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        changeCollectionInfo: build.mutation<unknown, { collectionId: string, title: string, tags: string[] }>({\r\n            query: ({collectionId, title, tags}) => ({\r\n                url: `/collections/${collectionId}`,\r\n                method: `PATCH`,\r\n                body: {\r\n                    title,\r\n                    tags\r\n                }\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        deleteAuthorFromCollection: build.mutation<unknown, { collectionId: string, authorId: string }>({\r\n            query: ({collectionId, authorId}) => ({\r\n                url: `/collections/${collectionId}/authors/${authorId}`,\r\n                method: `DELETE`\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        deleteViewerFromCollection: build.mutation<unknown, { collectionId: string, viewerId: string }>({\r\n            query: ({collectionId, viewerId}) => ({\r\n                url: `/collections/${collectionId}/viewers/${viewerId}`,\r\n                method: `DELETE`\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        deleteRequestedUserFromCollection: build.mutation<unknown, { collectionId: string, userId: string }>({\r\n            query: ({collectionId, userId}) => ({\r\n                url: `/collections/${collectionId}/requests/${userId}`,\r\n                method: `DELETE`\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        deleteCurrentUserFromCollection: build.mutation<unknown, { collectionId: string }>({\r\n            query: ({collectionId}) => ({\r\n                url: `/collections/${collectionId}/current`,\r\n                method: `DELETE`,\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        }),\r\n        changeIsPrivate: build.mutation<unknown, { collectionId: string }>({\r\n            query: ({collectionId}) => ({\r\n                url: `/collections/${collectionId}/isPrivate`,\r\n                method: `PATCH`,\r\n            }),\r\n            invalidatesTags: ['Collection']\r\n        })\r\n    }),\r\n})\r\n\r\nexport default extendedCollectionsApi","import {IOnePost, IPost} from \"../../types/post\";\r\nimport {IResponse, IResponseWithMessage} from \"../slices/userSlice\";\r\nimport {returnTransformedError} from \"../utils\";\r\nimport {ICreatePostBody, ICRUDOperationWithoutId, idType, rootApi} from \"./rootApi\";\r\n\r\nconst extendedPostsApi = rootApi.injectEndpoints({\r\n    endpoints: (build) => ({\r\n        getMany: build.query<IPost[], {page: number, arrayOfId: string[]}>({\r\n            query: ({page, arrayOfId}) => ({\r\n                url: '/posts',\r\n                params: {\r\n                    page,\r\n                    arrayOfId: JSON.stringify(arrayOfId)\r\n                }\r\n            }),\r\n            transformResponse: (response: IResponse<{ posts: IPost[] }>) => response.data.posts,\r\n        }),\r\n        getPostsByCollectionId: build.query<IPost[], {arrayOfId: string[], id: string}>({\r\n            query: ({arrayOfId, id}) => ({\r\n                url: `/posts/collections/${id}`,\r\n                params: {\r\n                    arrayOfId: JSON.stringify(arrayOfId)\r\n                }\r\n            }),\r\n            transformResponse: (response: IResponse<{ posts: IPost[] }>) => response.data.posts,\r\n        }),\r\n        searchPosts: build.query<IPost[], { title: string, page: number, arrayOfId: string[] }>({\r\n            query: ({title, page, arrayOfId}) => ({\r\n                url: `/posts/search`,\r\n                params: {\r\n                    title,\r\n                    page,\r\n                    arrayOfId: JSON.stringify(arrayOfId)\r\n                }\r\n            }),\r\n            transformResponse: (response: IResponse<{ posts: IPost[] }>) => response.data.posts,\r\n        }),\r\n        getPostsByUserId: build.query<IPost[], { id: string, arrayOfId: string[] }>({\r\n            query: ({id, arrayOfId}) => ({\r\n                url: `/users/${id}/posts`,\r\n                params: {\r\n                    arrayOfId: JSON.stringify(arrayOfId)\r\n                }\r\n            }),\r\n            transformResponse: (response: IResponse<{ posts: IPost[] }>) => response.data.posts,\r\n        }),\r\n        getOneById: build.query<IOnePost, idType>({\r\n            query: ({id}) => ({\r\n                url: `/posts/${id}`\r\n            }),\r\n            transformErrorResponse: returnTransformedError,\r\n            transformResponse: (response: IResponse<{ post: IOnePost }>) => response.data.post\r\n        }),\r\n        createPost: build.mutation<IResponseWithMessage<{ post: IPost }>, ICRUDOperationWithoutId<ICreatePostBody>>({\r\n            query: ({body}) => ({\r\n                url: '/posts',\r\n                method: 'POST',\r\n                body: body,\r\n            }),\r\n            transformErrorResponse: returnTransformedError\r\n        }),\r\n        deletePost: build.mutation<void, idType>({\r\n            query: ({id}) => ({\r\n                url: `/posts/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            transformErrorResponse: returnTransformedError,\r\n        }),\r\n        likeOneById: build.mutation<unknown, idType>({\r\n            query: ({id}) => ({\r\n                url: `/posts/${id}/like`,\r\n                method: 'PATCH',\r\n            }),\r\n            transformErrorResponse: returnTransformedError,\r\n        }),\r\n        unlikeOneById: build.mutation<unknown, idType>({\r\n            query: ({id}) => ({\r\n                url: `/posts/${id}/unlike`,\r\n                method: 'PATCH',\r\n            }),\r\n            transformErrorResponse: returnTransformedError,\r\n        }),\r\n    }),\r\n    overrideExisting: false\r\n})\r\n\r\nexport default extendedPostsApi","import {FetchBaseQueryError} from \"@reduxjs/toolkit/query\";\r\nimport {IResponseNotification} from \"./slices/responseNotificationsSlice\";\r\n\r\nexport const returnTransformedError = (baseQueryReturnValue: FetchBaseQueryError) =>  {\r\n    return baseQueryReturnValue.data as IResponseNotification\r\n}","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["initPosts","extendedPostsApi","unlikePost","likePost","extendedCollectionsApi","unsavePost","savePost","useState","posts","setPosts","useEffect","length","toggleLike","id","isLiked","unwrap","prev","map","post","_id","initLikesCount","likesCount","console","log","toggleSave","postId","collectionId","isSaved","savesCount","changedSavesInfo","savesInfo","info","title","isSomewhereSaved","some","updateSavesInfo","rootApi","endpoints","build","getOneWithPostsAndAuthor","query","url","transformResponse","response","data","providesTags","getCollectionsByUserId","collections","searchCollections","params","getAllowedToViewCollections","allowedToViewCollections","getCurrentUserCollections","createCollection","mutation","method","body","transformErrorResponse","returnTransformedError","deleteCollection","savePostInCollection","deletePostFromCollection","addAuthorToCollection","authorId","role","invalidatesTags","addViewerToCollection","viewerId","sendRequestToJoinToCollection","unsendRequestToJoinFromCollection","changeAuthorRoleInCollection","changeCollectionInfo","tags","deleteAuthorFromCollection","deleteViewerFromCollection","deleteRequestedUserFromCollection","userId","deleteCurrentUserFromCollection","changeIsPrivate","getMany","page","arrayOfId","JSON","stringify","getPostsByCollectionId","searchPosts","getPostsByUserId","getOneById","createPost","deletePost","likeOneById","unlikeOneById","overrideExisting","baseQueryReturnValue","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","createObserver","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","props","children","React","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","ref","setRef","state","setState","current","entryTarget","_state$entry","previousEntryTarget","result"],"sourceRoot":""}
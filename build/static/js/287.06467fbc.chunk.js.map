{"version":3,"file":"static/js/287.06467fbc.chunk.js","mappings":"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","sources":["components/Posts/Posts.tsx","components/Posts/index.ts","redux/api/hooks/useGetManyPostsWithInfiniteScroll.ts","components/Posts/postsStyles.ts","hooks/useInfiniteScrollForQueryHook.ts"],"sourcesContent":["import { Box, Container, Typography} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport usePostsActions from \"../../hooks/usePostsActions\";\r\nimport FullScreenLoader from \"../Loaders/FullScreenLoader\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport postsStyles from \"./postsStyles\";\r\nimport useShortTranslation from \"../../hooks/useShortTranslation\";\r\nimport StandardHelmet from \"../StandardHelmet\";\r\nimport useGetManyPostsWithInfiniteScroll from \"../../redux/api/hooks/useGetManyPostsWithInfiniteScroll\";\r\n\r\nconst MasonryPostsDrawer = React.lazy(() => import( \"../MasonryPostsDrawer\"));\r\n\r\nexport default function Posts() {\r\n\r\n    const {data, isLoading: isPostsLoading, error: postsError, ref, isEnd} = useGetManyPostsWithInfiniteScroll()\r\n\r\n    const [posts, postsActions] = usePostsActions({initPosts: data})\r\n\r\n    const styles = useSx(postsStyles)\r\n\r\n    const t = useShortTranslation({componentNameKey: 'Posts'})\r\n\r\n    if (isPostsLoading) return (\r\n        <FullScreenLoader withMeta/>\r\n    )\r\n\r\n    if (postsError) {\r\n        return (\r\n            <>\r\n                <StandardHelmet keyOfOther='error'/>\r\n                <Container sx={styles.errorContainer}>\r\n                    <Typography variant='h1' sx={{textAlign: 'center'}}>{t('error')}</Typography>\r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StandardHelmet keyOfTitle='posts'/>\r\n            <Box\r\n                sx={styles.container}\r\n            >\r\n                <MasonryPostsDrawer posts={posts} postsActions={postsActions}/>\r\n            </Box>\r\n            <div ref={ref}/>\r\n            {isEnd && <Typography variant='h4' textAlign='center' sx={{my: 2}}>This is the end</Typography>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import Posts from './Posts'\r\nexport default Posts","import useInfiniteScrollForQueryHook from \"../../../hooks/useInfiniteScrollForQueryHook\";\r\nimport extendedPostsApi from \"../extendedPostsApi\";\r\n\r\nexport default function useGetManyPostsWithInfiniteScroll() {\r\n\r\n    const [trigger, {data = [], isLoading, isError}] = extendedPostsApi.useLazyGetManyQuery()\r\n\r\n    const {paginatedData, isEnd, ref} = useInfiniteScrollForQueryHook({\r\n        isLoading,\r\n        data,\r\n        isError,\r\n        triggerCallback: ({page}) => {\r\n            const arrayOfId = paginatedData.map((el) => el._id)\r\n            trigger({page, arrayOfId})\r\n        }\r\n    })\r\n\r\n    return {data: paginatedData, isLoading, error: isError, ref, isEnd}\r\n}","import {Theme} from \"@mui/material\";\r\n\r\n\r\nconst postsStyles = (theme: Theme) => {\r\n\r\n\r\n    return {\r\n        container: {\r\n            py: 2,\r\n            px: 1,\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n\r\n            // height: '200vh'\r\n        },\r\n        errorContainer: {\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            height: '90vh',\r\n            maxHeight: '90vh'\r\n        },\r\n        postsList: {\r\n            width: '20%',\r\n            [theme.breakpoints.down('laptop')]: {\r\n                width: '33.33%'\r\n            },\r\n            [theme.breakpoints.down('tablet')]: {\r\n                width: '50%'\r\n            },\r\n            // mx: 'auto',\r\n            // my: 0,\r\n            margin: 1\r\n            // minHeight: '110vh'\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default postsStyles","import React, {useEffect, useState} from \"react\";\r\nimport {useInView} from \"react-intersection-observer\";\r\n\r\nexport interface IUseInfiniteScrollForQueryHookProps {\r\n    isLoading: boolean,\r\n    data: any[],\r\n    isError: boolean,\r\n    triggerCallback: ({page}: { page: number }) => void,\r\n    refetchDependencies?: any[]\r\n}\r\n\r\nexport default function useInfiniteScrollForQueryHook({\r\n                                                          isLoading,\r\n                                                          data,\r\n                                                          isError,\r\n                                                          triggerCallback,\r\n                                                          refetchDependencies = []\r\n                                                      }: IUseInfiniteScrollForQueryHookProps) {\r\n    const [isEnd, setIsEnd] = useState(false);\r\n    const [combinedValue, setCombinedValue] = useState(data);\r\n    const [page, setPage] = useState(1);\r\n\r\n    const {ref, inView} = useInView({\r\n        threshold: 0,\r\n        rootMargin: page > 1 ? '500px' : '100px'\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log('refetch')\r\n        setPage(1)\r\n        setCombinedValue([])\r\n        setIsEnd(false)\r\n        triggerCallback({page: 1})\r\n    }, [...refetchDependencies]);\r\n\r\n    useEffect(() => {\r\n        if (isError) return;\r\n        if (data.length < 1 || isLoading) return\r\n        if (data.length < 1 && combinedValue.length > 0) {\r\n            setIsEnd(true)\r\n            return\r\n        }\r\n        if (data.length < 15) {\r\n            setIsEnd(true)\r\n        }\r\n\r\n        setCombinedValue(prev => {\r\n            if (prev.length < 1) return data\r\n\r\n            const isNewDataNotSameToPrev = data.findIndex((el) => el._id === prev[prev.length - 1]._id) === -1\r\n\r\n            if (isNewDataNotSameToPrev) {\r\n                return [...prev, ...data]\r\n            }\r\n\r\n            return prev\r\n        })\r\n    }, [data, isLoading, inView]);\r\n\r\n    useEffect(() => {\r\n        if (isError) return;\r\n        if (!inView || isLoading) return;\r\n        if (isEnd) return;\r\n\r\n        setPage(prev => prev + 1)\r\n    }, [inView]);\r\n\r\n    useEffect(() => {\r\n        triggerCallback({page})\r\n    }, [page]);\r\n\r\n    return {paginatedData: combinedValue, isEnd, ref, inView, page}\r\n}"],"names":["MasonryPostsDrawer","React","extendedPostsApi","trigger","data","isLoading","isError","useInfiniteScrollForQueryHook","triggerCallback","page","arrayOfId","paginatedData","map","el","_id","isEnd","ref","error","useGetManyPostsWithInfiniteScroll","isPostsLoading","postsError","usePostsActions","initPosts","posts","postsActions","styles","useSx","postsStyles","t","useShortTranslation","componentNameKey","FullScreenLoader","withMeta","StandardHelmet","keyOfOther","Container","sx","errorContainer","Typography","variant","textAlign","keyOfTitle","Box","container","my","theme","py","px","display","flexDirection","margin","alignItems","justifyContent","height","maxHeight","postsList","width","breakpoints","down","refetchDependencies","useState","setIsEnd","combinedValue","setCombinedValue","setPage","useInView","threshold","rootMargin","inView","useEffect","console","log","length","prev","findIndex"],"sourceRoot":""}
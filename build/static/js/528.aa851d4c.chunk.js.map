{"version":3,"file":"static/js/528.aa851d4c.chunk.js","mappings":"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","sources":["components/CreateCollectionModal/createCollectionModalStyles.ts","components/CreateCollectionModal/CreateCollectionModal.tsx","components/CreateCollectionModal/index.ts","components/Loaders/MiniLoader.tsx","components/PostItem/postItemStyles.ts","components/PostItem/PostItemComponents/PostItemBottomButtonsWrapper.tsx","components/PostItem/PostItemComponents/PostItemTitle.tsx","components/PostItem/index.ts","components/PostItem/PostItem.tsx","components/PostSavesInfo/postSavesInfoStyles.ts","components/PostSavesInfo/index.ts","components/PostSavesInfo/PostSavesInfo.tsx","hooks/useAnchorEl.ts","hooks/usePostsActions.ts"],"sourcesContent":["import {Theme} from \"@mui/material\";\r\n\r\nconst createCollectionModalStyles = (theme: Theme) => {\r\n\r\n\r\n    return {\r\n        backdrop: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n        },\r\n        wrapper: {\r\n            bgcolor: 'background.default',\r\n            mx: 2,\r\n            py: 2,\r\n            px: 2,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            minHeight: '50vh',\r\n            borderRadius: 4,\r\n        },\r\n        title: {\r\n            color: theme.palette.text.standard,\r\n            textAlign: 'center',\r\n            mx: 'auto',\r\n            my: 2,\r\n            wordBreak: 'break-word'\r\n        },\r\n        form: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            width: '90%',\r\n        } as const,\r\n        label: {my: 1},\r\n        submitButton: {alignSelf: 'end', mt: 2}\r\n    }\r\n}\r\n\r\nexport default createCollectionModalStyles","import {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup/dist/yup\";\r\nimport {Button, Container, IconButton, InputLabel, Modal, OutlinedInput, Typography, useTheme} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {collectionValidationSchema} from \"../../utils/validationSchemas\";\r\nimport {updateSavesInfo} from \"../../hooks/usePostsActions\";\r\nimport {extendedCollectionsApi} from \"../../redux/api/rootApi\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport useSx from \"../../hooks/useSx\";\r\nimport createCollectionStyles from \"./createCollectionModalStyles\";\r\nimport useShortTranslation from \"../../hooks/useShortTranslation\";\r\nimport StandardHelmet from \"../StandardHelmet\";\r\nimport MiniLoader from \"../Loaders/MiniLoader\";\r\n\r\ninterface ICollectionFormData {\r\n    title: string,\r\n    tags: string,\r\n}\r\n\r\ninterface ICreateCollectionModalProps {\r\n    closeModal: () => void,\r\n    isModalOpen: boolean,\r\n    onCreate?: updateSavesInfo,\r\n    postId?: string,\r\n    refetch?: () => void\r\n}\r\n\r\nconst isFunction = (any: any): any is Function => typeof any === 'function'\r\n\r\nexport default function CreateCollectionModal(\r\n    {\r\n        closeModal,\r\n        isModalOpen,\r\n        onCreate,\r\n        refetch,\r\n        postId\r\n    }: ICreateCollectionModalProps) {\r\n\r\n    const [createCollection, {isLoading: isCollectionCreatingLoading}] = extendedCollectionsApi.useCreateCollectionMutation()\r\n\r\n    const {\r\n        register,\r\n        reset: resetForm,\r\n        handleSubmit,\r\n        formState: {errors: {title: titleError, tags: tagsError}}\r\n    } = useForm<ICollectionFormData>({\r\n        resolver: yupResolver(collectionValidationSchema),\r\n        mode: 'all'\r\n    });\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const onSubmit = handleSubmit(({title, tags}) => {\r\n        const formattedTags = tags.split(' ')\r\n\r\n        createNewUserCollection({title, tags: formattedTags})\r\n    })\r\n\r\n    const createNewUserCollection = async (body: { title: string, tags: string[] }) => {\r\n\r\n        try {\r\n            const response = await createCollection({body}).unwrap()\r\n\r\n            resetForm()\r\n            closeModal()\r\n\r\n            if (isFunction(onCreate)) {\r\n                onCreate(body.title, response.data.collection._id, postId as string)\r\n            }\r\n\r\n            if (isFunction(refetch)) {\r\n\r\n                refetch()\r\n                navigate(`/post/create/${response.data.collection._id}`)\r\n            }\r\n\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    const styles = useSx(createCollectionStyles)\r\n\r\n    const t = useShortTranslation({componentNameKey: 'CreateCollectionModal'})\r\n\r\n    const titleLabel = titleError?.message ? t(titleError.message) : t('titleLabel')\r\n    const tagsLabel = tagsError?.message ? t(tagsError.message) : t('tagsLabel')\r\n\r\n    return (\r\n        <>\r\n            {isModalOpen && (\r\n                <StandardHelmet keyOfTitle='createCollectionModal'/>\r\n            )}\r\n            <Modal\r\n                open={isModalOpen}\r\n                onClose={closeModal}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n                sx={styles.backdrop}\r\n            >\r\n                <Container\r\n                    sx={styles.wrapper}\r\n                    maxWidth='tablet'\r\n                >\r\n                    {isCollectionCreatingLoading ?\r\n                        <MiniLoader withMeta/>\r\n                        :\r\n                        <>\r\n                            <IconButton color='error' sx={{alignSelf: 'end'}} onClick={closeModal}>\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                            <Typography\r\n                                variant='h3'\r\n                                sx={styles.title}\r\n                            >\r\n                                {t('title')}\r\n                            </Typography>\r\n                            <form style={styles.form} onSubmit={onSubmit}>\r\n                                <InputLabel htmlFor='title' error={!!titleError} sx={styles.label}>\r\n                                    {titleLabel}\r\n                                </InputLabel>\r\n                                <OutlinedInput fullWidth id='title' {...register('title')}/>\r\n                                <InputLabel htmlFor='tags' error={!!tagsError} sx={styles.label}>\r\n                                    {tagsLabel}\r\n                                </InputLabel>\r\n                                <OutlinedInput fullWidth id='tags' {...register('tags')}/>\r\n                                <Button type='submit' variant='outlined'\r\n                                        sx={styles.submitButton}>{t('submitButton')}</Button>\r\n                            </form>\r\n                        </>\r\n                    }\r\n                </Container>\r\n            </Modal>\r\n        </>\r\n    )\r\n}","import CreateCollectionModal from './CreateCollectionModal';\r\n\r\nexport default CreateCollectionModal","import {Box, CircularProgress} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport StandardHelmet from \"../StandardHelmet\";\r\n\r\ninterface IMiniLoaderProps {\r\n    size?: string,\r\n    bgOff?: boolean,\r\n    withMeta?: boolean\r\n}\r\n\r\nexport default function MiniLoader({size, bgOff, withMeta}: IMiniLoaderProps) {\r\n\r\n    return (\r\n        <>\r\n            {withMeta && (\r\n                <StandardHelmet keyOfOther='loading'/>\r\n            )}\r\n            <Box sx={{\r\n                bgcolor: bgOff ? 'none' : 'background.default',\r\n                borderRadius: '50%',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                mt: 7,\r\n                position: 'relative',\r\n                width: size || '20vw',\r\n                height: size || '20vh',\r\n                mx: 'auto',\r\n            }}>\r\n                <Box sx={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', width: '100%', height: '100%'}}>\r\n                    <CircularProgress size={size || '20vw'}/>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n\r\n}","import {styled, Theme} from \"@mui/material\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst postItemStyles = (theme: Theme) => {\r\n\r\n    const {palette} = theme\r\n    const {primary} = palette\r\n\r\n    return {\r\n        postItem: {\r\n            display: 'inline-block',\r\n            '&:hover .buttonsBar': {\r\n                opacity: 1\r\n            },\r\n            width: '100%'\r\n        },\r\n        postItemWrapper: {\r\n            position: 'relative',\r\n            '&:hover .postImage': {\r\n                filter: 'brightness(80%)',\r\n            },\r\n        },\r\n        image: {\r\n            width: '100%',\r\n            borderRadius: '8px',\r\n            backgroundColor: primary.main,\r\n        },\r\n        postTopButtonsWrapper: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: 0.5,\r\n            position: 'absolute',\r\n            top: '0',\r\n            right: '0',\r\n            zIndex: 100,\r\n            opacity: 0,\r\n            [theme.breakpoints.down('laptop')]: {\r\n                opacity: 100,\r\n            }\r\n        },\r\n        postBottomButtonsWrapper: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: 0.5,\r\n            position: 'absolute',\r\n            top: '100%',\r\n            transform: 'translateY(-110%)',\r\n            zIndex: 100,\r\n            opacity: 0,\r\n            color: theme.palette.text.light,\r\n            [theme.breakpoints.down('laptop')]: {\r\n                opacity: 100,\r\n            }\r\n        },\r\n        postItemTitleWrapper: {\r\n            px: 0.5,\r\n            pb: 1,\r\n            whiteSpace: 'break-spaces',\r\n            wordBreak: 'break-all',\r\n            [theme.breakpoints.down('tablet')]: {\r\n                pl: 0.5,\r\n                pr: 0,\r\n                pb: 0\r\n            }\r\n        },\r\n        authorAvatar: {\r\n            width: '40px',\r\n            height: '40px',\r\n            [theme.breakpoints.down('tablet')]: {\r\n                width: 32,\r\n                height: 32\r\n            }\r\n        },\r\n        authorUsername: {\r\n            ml: 1,\r\n        },\r\n    }\r\n}\r\n\r\nexport default postItemStyles\r\n\r\nexport const StyledNavLink = styled(NavLink)(({theme}) => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'start',\r\n    '&:hover p': {\r\n        color: theme.palette.primary.main\r\n    }\r\n}))","import {Box, IconButton, Typography} from \"@mui/material\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport React from \"react\";\r\nimport useSx from \"../../../hooks/useSx\";\r\nimport postItemStyles from \"../postItemStyles\";\r\n\r\ninterface IPostItemLikesContainerProps {\r\n    onToggleLike: () => void,\r\n    isLiked: boolean,\r\n    likesCount: number\r\n}\r\n\r\nexport default function PostItemBottomButtonsWrapper({onToggleLike, isLiked, likesCount}: IPostItemLikesContainerProps) {\r\n\r\n    const styles = useSx(postItemStyles)\r\n\r\n    return (\r\n        <Box\r\n            sx={styles.postBottomButtonsWrapper}\r\n            className='buttonsBar'\r\n        >\r\n            <IconButton sx={{color: 'currentColor'}} onClick={onToggleLike}>\r\n                {isLiked ? <FavoriteIcon color='secondary'/> : <FavoriteBorderIcon/>}\r\n            </IconButton>\r\n            <Typography sx={{ml: 0.5, color: 'currentColor'}}>\r\n                {likesCount}\r\n            </Typography>\r\n        </Box>\r\n    )\r\n}","import {Avatar, Box, Typography} from \"@mui/material\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport useSx from \"../../../hooks/useSx\";\r\nimport postItemStyles, {StyledNavLink} from \"../postItemStyles\";\r\n\r\n\r\ninterface IPostItemTitleProps {\r\n    postId: string,\r\n    title: string,\r\n    formattedTags: string,\r\n    authorId: string,\r\n    avatarURL: string | null,\r\n    username: string,\r\n    showAuthor: boolean\r\n}\r\n\r\nexport default function PostItemTitle({postId, title, formattedTags, authorId, avatarURL, username, showAuthor}: IPostItemTitleProps) {\r\n\r\n    const styles = useSx(postItemStyles)\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={styles.postItemTitleWrapper}\r\n            >\r\n                <NavLink to={`/posts/${postId}`}>\r\n                    <Typography sx={{mb: '-4px'}}  variant='h6'>{title}</Typography>\r\n                    <Typography variant='caption'>{formattedTags}</Typography>\r\n                </NavLink>\r\n            </Box>\r\n            {showAuthor && (\r\n                <StyledNavLink to={`/users/${authorId}`}>\r\n                    <Avatar sx={styles.authorAvatar} src={avatarURL || ''}/>\r\n                    <Typography className='username' sx={styles.authorUsername}>{username}</Typography>\r\n                </StyledNavLink>\r\n            )}\r\n        </>\r\n    )\r\n}","import PostItem from './PostItem'\r\nexport default PostItem","import {\r\n    Box,\r\n    ImageListItem,\r\n    ImageListItemBar,\r\n} from \"@mui/material\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {IPost, ISavesInfo} from \"../../types/post\";\r\nimport React, {Dispatch, useState} from \"react\";\r\nimport {IPostsActions} from \"../../hooks/usePostsActions\";\r\nimport PostSavesInfo from \"../PostSavesInfo\";\r\nimport CreateCollectionModal from \"../CreateCollectionModal\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport postItemStyles from \"./postItemStyles\";\r\nimport PostItemBottomButtonsWrapper from \"./PostItemComponents/PostItemBottomButtonsWrapper\";\r\nimport PostItemTitle from \"./PostItemComponents/PostItemTitle\";\r\n\r\ninterface IPostItemProps {\r\n    post: IPost,\r\n    postsActions: IPostsActions,\r\n    showAuthor?: boolean\r\n}\r\n\r\n\r\nexport default function PostItem({post, postsActions, showAuthor = true}: IPostItemProps) {\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const {toggleLike, toggleSave, updateSavesInfo} = postsActions\r\n\r\n    const {\r\n        _id: postId,\r\n        author,\r\n        title,\r\n        tags,\r\n        likesCount,\r\n        image: postImageURL,\r\n        isLiked,\r\n        isSomewhereSaved: isSaved,\r\n        savesInfo\r\n    } = post\r\n\r\n    const {username, _id: authorId, avatar: avatarURL = ''} = author\r\n\r\n    const formattedTags = tags.join(' ')\r\n\r\n    const styles = useSx(postItemStyles)\r\n\r\n    const openModal = () => setIsModalOpen(true)\r\n    const closeModal = () => setIsModalOpen(false)\r\n    const onToggleLike = () => toggleLike(postId, isLiked)\r\n\r\n\r\n    return (\r\n        <>\r\n            <CreateCollectionModal\r\n                onCreate={updateSavesInfo}\r\n                postId={post._id}\r\n                closeModal={closeModal}\r\n                isModalOpen={isModalOpen}\r\n            />\r\n            <ImageListItem\r\n                key={postId}\r\n                sx={styles.postItem}\r\n            >\r\n                <Box\r\n                    sx={styles.postItemWrapper}\r\n                >\r\n                    <NavLink to={`/posts/${postId}`}>\r\n                        <img\r\n                            src={postImageURL}\r\n                            style={styles.image}\r\n                            className='postImage'\r\n                        />\r\n                    </NavLink>\r\n                    <Box\r\n                        sx={styles.postTopButtonsWrapper}\r\n                        className='buttonsBar'\r\n                    >\r\n                        <PostSavesInfo\r\n                            collections={savesInfo}\r\n                            toggleSave={toggleSave}\r\n                            postId={postId}\r\n                            isSaved={isSaved}\r\n                            openModal={openModal}\r\n                        />\r\n                    </Box>\r\n                    <PostItemBottomButtonsWrapper\r\n                        onToggleLike={onToggleLike}\r\n                        isLiked={isLiked}\r\n                        likesCount={likesCount}\r\n                    />\r\n                </Box>\r\n                <ImageListItemBar\r\n                    position=\"below\"\r\n                    sx={{\r\n                        '& .MuiImageListItemBar-titleWrap': {\r\n                            padding: 0\r\n                        }\r\n                    }}\r\n                    title={\r\n                        <PostItemTitle\r\n                            showAuthor={showAuthor}\r\n                            postId={postId}\r\n                            title={title}\r\n                            formattedTags={formattedTags}\r\n                            authorId={authorId}\r\n                            avatarURL={avatarURL}\r\n                            username={username}\r\n                        />\r\n                    }\r\n                />\r\n            </ImageListItem>\r\n        </>\r\n    )\r\n}\r\n\r\n","import {Theme} from \"@mui/material\";\r\n\r\n\r\nconst postSavesInfoStyles = (theme: Theme) => {\r\n\r\n\r\n    return {\r\n        wrapper: {\r\n            ml: 'auto'\r\n        },\r\n        openMenuButton: {ml: 'auto', color: theme.palette.text.light},\r\n        menuList: {\r\n            backgroundColor: 'rgba(0, 0, 0, 0.2)',\r\n            '& .MuiPaper-root': {\r\n                bgcolor: 'background.paper',\r\n                maxHeight: '300px',\r\n            },\r\n            '& .MuiMenu-list': {\r\n                bgcolor: 'background.paper',\r\n                py: 0\r\n            }\r\n        },\r\n        menuItem: {\r\n            '&:hover .saveActionButton': {\r\n                display: 'flex'\r\n            },\r\n            bgcolor: 'background.paper',\r\n            position: 'relative'\r\n        },\r\n        menuItemButton: {position: 'absolute', right: 8, display: 'none'},\r\n        staticButtonsWrapper: {\r\n            bgcolor: 'background.paper',\r\n            px: 1,\r\n            py: 1,\r\n            position: 'sticky',\r\n            bottom: '-1px',\r\n            '&:hover': {\r\n                bgcolor: 'background.paper',\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default postSavesInfoStyles","import PostSavesInfo from './PostSavesInfo';\r\nexport default PostSavesInfo","import {ISavesInfo} from \"../../types/post\";\r\nimport {toggleSaveType} from \"../../hooks/usePostsActions\";\r\nimport useAnchorEl from \"../../hooks/useAnchorEl\";\r\nimport {Box, Button, IconButton, ListItemText, Menu, MenuItem, useTheme} from \"@mui/material\";\r\nimport BookmarkAddedIcon from \"@mui/icons-material/BookmarkAdded\";\r\nimport BookmarkBorderIcon from \"@mui/icons-material/BookmarkBorder\";\r\nimport React from \"react\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport postSavesInfoStyles from \"./postSavesInfoStyles\";\r\nimport useShortTranslation from \"../../hooks/useShortTranslation\";\r\n\r\ninterface ISavesInfoProps {\r\n    collections: ISavesInfo[],\r\n    toggleSave: toggleSaveType,\r\n    postId: string,\r\n    isSaved: boolean,\r\n    openModal: () => void\r\n}\r\n\r\nexport default function PostSavesInfo({collections, toggleSave, postId, isSaved, openModal}: ISavesInfoProps) {\r\n\r\n    const {anchorEl, isAnchorEl, handleClick, handleClose} = useAnchorEl()\r\n\r\n    const onToggleSave = (postId: string, collectionId: string, isSaved: boolean) => {\r\n        handleClose()\r\n        toggleSave(postId, collectionId, isSaved)\r\n    }\r\n\r\n    const t = useShortTranslation({componentNameKey: 'PostSavesInfo'})\r\n\r\n    const styles = useSx(postSavesInfoStyles)\r\n\r\n\r\n    return (\r\n        <Box sx={styles.wrapper}>\r\n            <IconButton\r\n                id=\"basic-button\"\r\n                aria-controls={isAnchorEl ? 'basic-menu' : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={isAnchorEl ? 'true' : undefined}\r\n                onClick={handleClick}\r\n                sx={styles.openMenuButton}\r\n            >\r\n                {isSaved ? <BookmarkAddedIcon/> : <BookmarkBorderIcon/>}\r\n            </IconButton>\r\n            <Menu\r\n                id=\"basic-menu\"\r\n                anchorEl={anchorEl}\r\n                open={isAnchorEl}\r\n                onClose={handleClose}\r\n                MenuListProps={{\r\n                    'aria-labelledby': 'basic-button',\r\n                }}\r\n                sx={styles.menuList}\r\n            >\r\n                {collections.map(({title, isSaved, collectionId}) => {\r\n                    const postActionLabel = isSaved ? t('deletePostButton') : t('savePostButton')\r\n\r\n                    return (\r\n                        <MenuItem sx={styles.menuItem} key={collectionId} onClick={() => onToggleSave(postId, collectionId, isSaved)}>\r\n                            <ListItemText sx={{mr: 1}}>\r\n                                {title}\r\n                            </ListItemText>\r\n                            <Button\r\n                                className='saveActionButton'\r\n                                color={isSaved ? 'error' : 'success'}\r\n                                sx={styles.menuItemButton}\r\n                                variant='contained'\r\n                            >\r\n                                {postActionLabel}\r\n                            </Button>\r\n                        </MenuItem>\r\n                    )\r\n                })}\r\n                <Box\r\n                    sx={styles.staticButtonsWrapper}\r\n                >\r\n                    <Button\r\n                        variant='contained'\r\n                        onClick={() => {\r\n                            handleClose()\r\n                            openModal()\r\n                        }}\r\n                    >\r\n                        {t('createNewCollectionButton')}\r\n                    </Button>\r\n                </Box>\r\n            </Menu>\r\n        </Box>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\n\r\nexport default function useAnchorEl () {\r\n\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return {\r\n        anchorEl,\r\n        setAnchorEl,\r\n        isAnchorEl: Boolean(anchorEl),\r\n        handleClick,\r\n        handleClose\r\n    }\r\n}","import {extendedCollectionsApi, extendedPostsApi} from \"../redux/api/rootApi\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {IPost, ISavesInfo} from \"../types/post\";\r\nimport useMediaQueries from \"./useMediaQueries\";\r\nimport sortItemsForMasonryList from \"../utils/sortItemsForMasonryList\";\r\n\r\nexport interface IUsePostsProps {\r\n    initPosts: IPost[] | undefined,\r\n}\r\n\r\nexport type toggleLikeType = (id: string, isLiked: boolean) => Promise<void>\r\nexport type toggleSaveType = (postId: string, collectionId: string, isSaved: boolean) => Promise<void>\r\nexport type updateSavesInfo = (title: string, collectionId: string, postId: string) => Promise<void>\r\n\r\nexport interface IPostsActions {\r\n    readonly toggleLike: toggleLikeType,\r\n    readonly toggleSave: toggleSaveType,\r\n    readonly updateSavesInfo: updateSavesInfo\r\n}\r\n\r\nexport type usePostsActionsReturnValue = readonly [IPost[], IPostsActions]\r\n\r\nconst usePostsActions = ({initPosts}: IUsePostsProps): usePostsActionsReturnValue => {\r\n    const [unlikePost] = extendedPostsApi.useUnlikeOneByIdMutation()\r\n    const [likePost] = extendedPostsApi.useLikeOneByIdMutation()\r\n    const [unsavePost] = extendedCollectionsApi.useDeletePostFromCollectionMutation()\r\n    const [savePost] = extendedCollectionsApi.useSavePostInCollectionMutation()\r\n\r\n    const [posts, setPosts] = useState(initPosts || []);\r\n\r\n    useEffect(() => {\r\n        if (initPosts) {\r\n            setPosts(initPosts)\r\n        }\r\n    }, [initPosts]);\r\n\r\n    const toggleLike = async (id: string, isLiked: boolean) => {\r\n        try {\r\n            if (isLiked) {\r\n                await unlikePost({id}).unwrap()\r\n            } else {\r\n                await likePost({id}).unwrap()\r\n            }\r\n\r\n            setPosts(prev => prev.map((post) => {\r\n                    if (post._id === id) {\r\n                        let {likesCount: initLikesCount, isLiked} = post\r\n\r\n                        const likesCount = isLiked ? --initLikesCount : ++initLikesCount\r\n\r\n                        return {...post, isLiked: !isLiked, likesCount}\r\n                    } else {\r\n                        return post\r\n                    }\r\n                })\r\n            )\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const toggleSave = async (postId: string, collectionId: string, isSaved: boolean) => {\r\n        try {\r\n            if (isSaved) {\r\n                await unsavePost({postId, collectionId}).unwrap()\r\n            } else {\r\n                await savePost({postId, collectionId}).unwrap()\r\n            }\r\n\r\n            setPosts(prev => prev.map((post) => {\r\n                    if (post._id === postId) {\r\n                        let {savesCount, savesInfo} = post\r\n\r\n                        const changedSavesInfo = savesInfo.map((info) => {\r\n                            if (info.collectionId === collectionId) {\r\n                                return {isSaved: !isSaved, collectionId: info.collectionId, title: info.title}\r\n                            }\r\n                            return info\r\n                        })\r\n\r\n                        const isSomewhereSaved = changedSavesInfo.some(({isSaved}) => !!isSaved)\r\n\r\n                        return {...post, isSomewhereSaved, savesCount, savesInfo: changedSavesInfo}\r\n                    } else {\r\n                        return post\r\n                    }\r\n                })\r\n            )\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const updateSavesInfo = async (title: string, collectionId: string, postId: string) => {\r\n        try {\r\n            await savePost({postId, collectionId}).unwrap()\r\n\r\n            setPosts(prev => prev.map((post) => {\r\n                if (post._id === postId) {\r\n                    return {...post, isSomewhereSaved: true, savesInfo: [...post.savesInfo, {title, collectionId, isSaved: true}]}\r\n                }\r\n\r\n                return {...post, savesInfo: [...post.savesInfo, {title, collectionId, isSaved: false}]}\r\n            }))\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // console.log('notSorted: ', posts)\r\n    // console.log('sorted: ', sortedPostsForMasonryList)\r\n\r\n    return [posts, {toggleLike, toggleSave, updateSavesInfo}] as const\r\n}\r\n\r\nexport default usePostsActions"],"names":["theme","backdrop","display","alignItems","justifyContent","wrapper","bgcolor","mx","py","px","flexDirection","minHeight","borderRadius","title","color","palette","text","standard","textAlign","my","wordBreak","form","width","label","submitButton","alignSelf","mt","isFunction","any","closeModal","isModalOpen","onCreate","refetch","postId","extendedCollectionsApi","createCollection","isCollectionCreatingLoading","isLoading","useForm","resolver","yupResolver","collectionValidationSchema","mode","register","resetForm","reset","handleSubmit","formState","errors","titleError","tagsError","tags","navigate","useNavigate","onSubmit","formattedTags","split","createNewUserCollection","body","unwrap","response","data","collection","_id","styles","useSx","createCollectionStyles","t","useShortTranslation","componentNameKey","titleLabel","message","tagsLabel","StandardHelmet","keyOfTitle","Modal","open","onClose","sx","Container","maxWidth","MiniLoader","withMeta","IconButton","onClick","Close","Typography","variant","style","InputLabel","htmlFor","error","OutlinedInput","fullWidth","id","Button","type","size","bgOff","keyOfOther","position","height","top","left","transform","postItem","opacity","postItemWrapper","filter","image","backgroundColor","primary","main","postTopButtonsWrapper","padding","right","zIndex","breakpoints","down","postBottomButtonsWrapper","light","postItemTitleWrapper","pb","whiteSpace","pl","pr","authorAvatar","authorUsername","ml","StyledNavLink","styled","NavLink","PostItemBottomButtonsWrapper","onToggleLike","isLiked","likesCount","postItemStyles","Box","className","Favorite","FavoriteBorder","PostItemTitle","authorId","avatarURL","username","showAuthor","to","mb","Avatar","src","post","postsActions","useState","setIsModalOpen","toggleLike","toggleSave","updateSavesInfo","author","postImageURL","isSaved","isSomewhereSaved","savesInfo","avatar","join","CreateCollectionModal","ImageListItem","PostSavesInfo","collections","openModal","ImageListItemBar","openMenuButton","menuList","maxHeight","menuItem","menuItemButton","staticButtonsWrapper","bottom","useAnchorEl","anchorEl","isAnchorEl","handleClick","handleClose","postSavesInfoStyles","undefined","BookmarkAdded","BookmarkBorder","Menu","MenuListProps","map","collectionId","postActionLabel","MenuItem","onToggleSave","ListItemText","mr","setAnchorEl","Boolean","event","currentTarget","initPosts","extendedPostsApi","unlikePost","likePost","unsavePost","savePost","posts","setPosts","useEffect","prev","initLikesCount","console","log","savesCount","changedSavesInfo","info","some"],"sourceRoot":""}
{"version":3,"file":"static/js/523.172f1f7b.chunk.js","mappings":"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","sources":["components/MasonryPostsDrawer/index.ts","components/MasonryPostsDrawer/MasonryPostsDrawer.tsx","utils/sortItemsForMasonryList.ts","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","hooks/useInfiniteScrollForQueryHook.ts","../node_modules/src/useInView.tsx","components/Posts/index.ts","components/Posts/Posts.tsx","components/Posts/postsStyles.ts","hooks/useMediaQueries.ts"],"sourcesContent":["\r\nimport MasonryPostsDrawer from \"./MasonryPostsDrawer\";\r\n\r\nexport default MasonryPostsDrawer","import {IPost} from \"../../types/post\";\r\nimport {IPostsActions} from \"../../hooks/usePostsActions\";\r\nimport useMediaQueries from \"../../hooks/useMediaQueries\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport postsStyles from \"../Posts/postsStyles\";\r\nimport sortItemsForMasonryList from \"../../utils/sortItemsForMasonryList\";\r\nimport {Box, ImageList} from \"@mui/material\";\r\nimport PostItem from \"../PostItem\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function MasonryPostsDrawer({posts, postsActions}: {posts: IPost[], postsActions: IPostsActions}) {\r\n    const {isSmallerThanLaptop, isSmallerThanTablet} = useMediaQueries()\r\n    const postsListCols = isSmallerThanLaptop ? isSmallerThanTablet ? 2 : 3 : 5\r\n\r\n    const columns = Array.from({length: postsListCols})\r\n\r\n    const styles = useSx(postsStyles)\r\n\r\n    const sortedPostsForMasonryList = sortItemsForMasonryList(postsListCols, posts)\r\n\r\n    return (\r\n        <Box sx={{display: 'flex'}}>\r\n            {columns.map((_, index) => {\r\n                const postsLengthInOneColumn = Math.round(sortedPostsForMasonryList.length / postsListCols) || 1\r\n\r\n                const slicedPosts = sortedPostsForMasonryList.slice(index * postsLengthInOneColumn, index * postsLengthInOneColumn + postsLengthInOneColumn)\r\n\r\n                return (\r\n                    <ImageList\r\n                        variant=\"masonry\"\r\n                        sx={styles.postsList}\r\n                        gap={12}\r\n                        key={index}\r\n                        cols={1}\r\n                    >\r\n                        {slicedPosts.map((post) => <PostItem\r\n                            postsActions={postsActions}\r\n                            post={post}\r\n                            key={post._id}\r\n                        />)}\r\n                    </ImageList>\r\n                )\r\n            })}\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n// 1 ImageList = 1 column\r\n\r\n// for example: if postsListCols = 3\r\n// html: first column second column third column\r\n//             image         image        image\r\n//             image         image        image\r\n//             image         image        image\r\n//             image         image        image\r\n//etc...","export default function sortItemsForMasonryList(columnsLength: number, array: any[]) {\r\n    const result: any[] = []\r\n\r\n    for (let column = 0; column < columnsLength; column++) {\r\n        for (let columnItem = column; columnItem < array.length; columnItem += columnsLength) {\r\n            // console.log(`column ${column} columnItem ${columnItem}`)\r\n            result.push(array[columnItem])\r\n        }\r\n    }\r\n\r\n    // notSorted\r\n    // 0 5 10 15 20\r\n    // 1 6 11 16 21\r\n    // 2 7 12 17 22\r\n    // 3 8 13 18 23\r\n    // 4 9 14 19 24\r\n\r\n    // may sorted to be\r\n    // 0 - 0 5 - 1 10 - 2 15 - 3 20 - 4\r\n\r\n    return result\r\n}\r\n\r\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import React, {useEffect, useState} from \"react\";\r\nimport {useInView} from \"react-intersection-observer\";\r\n\r\nexport interface IUseInfiniteScrollForQueryHookProps {\r\n    isLoading: boolean,\r\n    data: any[],\r\n    setPage: React.Dispatch<React.SetStateAction<number>>,\r\n    page: number,\r\n    isError: boolean\r\n}\r\n\r\nexport default function useInfiniteScrollForQueryHook({isLoading, data, setPage, isError, page}: IUseInfiniteScrollForQueryHookProps) {\r\n    const [isEnd, setIsEnd] = useState(false);\r\n    const [combinedValue, setCombinedValue] = useState(data);\r\n\r\n    const {ref, inView} = useInView({\r\n        threshold: 0,\r\n        rootMargin: page > 1 ? '500px' : '100px'\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (isError) return;\r\n        if (!data || isLoading) return\r\n        if (data.length < 1 && combinedValue.length > 0) {\r\n            setIsEnd(true)\r\n            // console.log('isEnd')\r\n            return\r\n        }\r\n\r\n        // console.log('data: ', data)\r\n\r\n        setCombinedValue(prev => {\r\n            if (prev.length < 1) return data\r\n\r\n            const isNewDataNotSameToPrev = data.findIndex((el) => el._id === prev[prev.length - 1]._id) === -1\r\n\r\n            if (isNewDataNotSameToPrev) {\r\n                return [...prev, ...data]\r\n            }\r\n\r\n            return prev\r\n        })\r\n    }, [data, isLoading, inView]);\r\n\r\n    useEffect(() => {\r\n        if (isError) return;\r\n        if (!inView || isLoading) return\r\n\r\n        setPage(prev => prev + 1)\r\n    }, [inView]);\r\n\r\n\r\n\r\n    return {paginatedData: combinedValue, isEnd, ref, inView}\r\n}","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import Posts from './Posts'\r\nexport default Posts","import {Avatar, Box, Container, Typography} from \"@mui/material\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {extendedPostsApi} from \"../../redux/api/rootApi\";\r\nimport usePostsActions from \"../../hooks/usePostsActions\";\r\nimport FullScreenLoader from \"../Loaders/FullScreenLoader\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport postsStyles from \"./postsStyles\";\r\nimport useShortTranslation from \"../../hooks/useShortTranslation\";\r\nimport useInfiniteScrollForQueryHook from \"../../hooks/useInfiniteScrollForQueryHook\";\r\n\r\nimport MasonryPostsDrawer from \"../MasonryPostsDrawer\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport StandardHelmet from \"../StandardHelmet\";\r\n\r\n\r\nfunction useGetManyPostsQueryWithInfiniteScroll() {\r\n    const [page, setPage] = useState(1);\r\n\r\n    const {\r\n        data = [],\r\n        isLoading,\r\n        error\r\n    } = extendedPostsApi.useGetManyQuery({page})\r\n\r\n    const {paginatedData, isEnd, ref} = useInfiniteScrollForQueryHook({\r\n        isLoading,\r\n        data,\r\n        setPage,\r\n        page,\r\n        isError: !!error\r\n    })\r\n\r\n    return {data: paginatedData, isLoading, error, ref, isEnd}\r\n}\r\n\r\n\r\nexport default function Posts() {\r\n\r\n    const {data, isLoading: isPostsLoading, error: postsError, ref, isEnd} = useGetManyPostsQueryWithInfiniteScroll()\r\n\r\n    const [posts, postsActions] = usePostsActions({initPosts: data})\r\n\r\n    const styles = useSx(postsStyles)\r\n\r\n    const t = useShortTranslation({componentNameKey: 'Posts'})\r\n    const tH = useShortTranslation({componentNameKey: 'Helmet'})\r\n\r\n    if (isPostsLoading) return (\r\n        <FullScreenLoader withMeta/>\r\n    )\r\n\r\n    if (postsError) {\r\n        return (\r\n            <>\r\n                <StandardHelmet keyOfOther='error'/>\r\n                <Container sx={styles.errorContainer}>\r\n                    <Typography variant='h1' sx={{textAlign: 'center'}}>{t('error')}</Typography>\r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StandardHelmet keyOfTitle='posts'/>\r\n            <Box\r\n                sx={styles.container}\r\n            >\r\n                <MasonryPostsDrawer posts={posts} postsActions={postsActions}/>\r\n            </Box>\r\n            <div ref={ref}/>\r\n            {isEnd && <Typography variant='h4' textAlign='center' sx={{my: 2}}>This is the end</Typography>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import {Theme} from \"@mui/material\";\r\n\r\n\r\nconst postsStyles = (theme: Theme) => {\r\n\r\n\r\n    return {\r\n        container: {\r\n            py: 2,\r\n            px: 1,\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n\r\n            // height: '200vh'\r\n        },\r\n        errorContainer: {\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            height: '90vh',\r\n            maxHeight: '90vh'\r\n        },\r\n        postsList: {\r\n            width: '20%',\r\n            [theme.breakpoints.down('laptop')]: {\r\n                width: '33.33%'\r\n            },\r\n            [theme.breakpoints.down('tablet')]: {\r\n                width: '50%'\r\n            },\r\n            // mx: 'auto',\r\n            // my: 0,\r\n            margin: 1\r\n            // minHeight: '110vh'\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default postsStyles","import useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport {useTheme} from \"@mui/material\";\r\n\r\n\r\nconst useMediaQueries = () => {\r\n\r\n    const theme = useTheme()\r\n\r\n    const isSmallerThanLaptop = useMediaQuery(theme.breakpoints.down('laptop'));\r\n    const isSmallerThanTablet = useMediaQuery(theme.breakpoints.down('tablet'));\r\n    const isSmallerThanMobile = useMediaQuery(theme.breakpoints.down('mobile'));\r\n\r\n\r\n    return {\r\n        isSmallerThanLaptop,\r\n        isSmallerThanTablet,\r\n        isSmallerThanMobile\r\n    }\r\n}\r\n\r\nexport default useMediaQueries"],"names":["posts","postsActions","useMediaQueries","isSmallerThanLaptop","isSmallerThanTablet","postsListCols","columns","Array","from","length","styles","useSx","postsStyles","sortedPostsForMasonryList","columnsLength","array","result","column","columnItem","push","sortItemsForMasonryList","Box","sx","display","map","_","index","postsLengthInOneColumn","Math","round","slicedPosts","slice","ImageList","variant","postsList","gap","cols","post","PostItem","_id","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","createObserver","id","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","props","children","React","useInfiniteScrollForQueryHook","isLoading","data","setPage","isError","page","useState","isEnd","setIsEnd","combinedValue","setCombinedValue","delay","rootMargin","triggerOnce","skip","initialInView","onChange","ref","setRef","state","setState","current","entryTarget","_state$entry","previousEntryTarget","useInView","useEffect","prev","findIndex","el","paginatedData","extendedPostsApi","error","useGetManyPostsQueryWithInfiniteScroll","isPostsLoading","postsError","usePostsActions","initPosts","t","useShortTranslation","componentNameKey","FullScreenLoader","withMeta","StandardHelmet","keyOfOther","Container","errorContainer","Typography","textAlign","keyOfTitle","container","MasonryPostsDrawer","my","theme","py","px","flexDirection","margin","alignItems","justifyContent","height","maxHeight","width","breakpoints","down","useTheme","useMediaQuery","isSmallerThanMobile"],"sourceRoot":""}
{"version":3,"file":"static/js/465.26e631bb.chunk.js","mappings":"qOAGA,MCQe,SAA4B,GAAuE,IAAtEA,EAAK,EAALA,MAAOC,EAAY,EAAZA,aAC/C,GAAmDC,EAAAA,EAAAA,KAA5CC,EAAmB,EAAnBA,oBAAqBC,EAAmB,EAAnBA,oBACtBC,EAAgBF,EAAsBC,EAAsB,EAAI,EAAI,EAEpEE,EAAUC,MAAMC,KAAK,CAACC,OAAQJ,IAE9BK,GAASC,EAAAA,EAAAA,GAAMC,EAAAA,GAEfC,ECnBK,SAAiCC,EAAuBC,GAGnE,IAFA,IAAMC,EAAgB,GAEbC,EAAS,EAAGA,EAASH,EAAeG,IACzC,IAAK,IAAIC,EAAaD,EAAQC,EAAaH,EAAMN,OAAQS,GAAcJ,EAEnEE,EAAOG,KAAKJ,EAAMG,IAc1B,OAAOF,CACX,CDFsCI,CAAwBf,EAAeL,GAEzE,OACI,SAACqB,EAAA,EAAG,CAACC,GAAI,CAACC,QAAS,QAAQ,SACtBjB,EAAQkB,KAAI,SAACC,EAAGC,GACb,IAAMC,EAAyBC,KAAKC,MAAMhB,EAA0BJ,OAASJ,IAAkB,EAEzFyB,EAAcjB,EAA0BkB,MAAML,EAAQC,EAAwBD,EAAQC,EAAyBA,GAErH,OACI,SAACK,EAAA,EAAS,CACNC,QAAQ,UACRX,GAAIZ,EAAOwB,UACXC,IAAK,GAELC,KAAM,EAAE,SAEPN,EAAYN,KAAI,SAACa,GAAI,OAAK,SAACC,EAAA,EAAQ,CAChCrC,aAAcA,EACdoC,KAAMA,GACDA,EAAKE,IACZ,KAPGb,EAUjB,KAGZ,C,oCENA,IArCoB,SAACc,GAAkB,IAAD,EAGlC,MAAO,CACHC,UAAW,CACPC,GAAI,EACJC,GAAI,EACJpB,QAAS,OACTqB,cAAe,OAInBC,eAAgB,CACZC,OAAQ,SACRvB,QAAS,OACTwB,WAAY,SACZC,eAAgB,SAChBC,OAAQ,OACRC,UAAW,QAEfhB,WAAS,GACLiB,MAAO,QAAK,SACXX,EAAMY,YAAYC,KAAK,UAAY,CAChCF,MAAO,YACV,SACAX,EAAMY,YAAYC,KAAK,UAAY,CAChCF,MAAO,SACV,kBAGO,GAAC,GAKrB,C,iNCxBe,SAASG,IAEpB,IAA6C,GAA3BC,EAAAA,EAAAA,MAAXC,GAAAA,OAAE,MAAG,GAAE,EAGd,EAA8CC,EAAAA,GAAAA,yBAA0C,CAACD,GAAAA,IAA5EE,EAAS,EAAfC,KAAiBC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAEnC,GAA8BC,EAAAA,EAAAA,GAAgB,CAACJ,UAAAA,IAAW,eAAnD1D,EAAK,KAAEC,EAAY,KAEpBS,GAASC,EAAAA,EAAAA,GAAMC,EAAAA,GACrB,GAAmDV,EAAAA,EAAAA,KAI7C6D,GAJoB,EAAnB5D,oBAAwC,EAAnBC,qBAIlB4D,EAAAA,EAAAA,GAAoB,CAACC,iBAAkB,4BAEjD,OAAIL,GACO,SAAC,IAAU,IAGlBC,GACO,SAAC,IAAU,CAAC5B,QAAQ,KAAI,SAAE8B,EAAE,WAGlC/D,GAKD,SAAC,IAAG,CACAsB,GAAIZ,EAAO+B,UAAU,UAErB,SAAC,IAAkB,CAACzC,MAAOA,EAAOC,aAAcA,OAP7C,SAAC,IAAU,CAACgC,QAAQ,KAAI,SAAE8B,EAAE,mBAU3C,C,+CC7BA,IAhBwB,WAEpB,IAAMvB,GAAQ0B,EAAAA,EAAAA,KAOd,MAAO,CACH/D,qBANwBgE,EAAAA,EAAAA,GAAc3B,EAAMY,YAAYC,KAAK,WAO7DjD,qBANwB+D,EAAAA,EAAAA,GAAc3B,EAAMY,YAAYC,KAAK,WAO7De,qBANwBD,EAAAA,EAAAA,GAAc3B,EAAMY,YAAYC,KAAK,WAQrE,C","sources":["components/MasonryPostsDrawer/index.ts","components/MasonryPostsDrawer/MasonryPostsDrawer.tsx","utils/sortItemsForMasonryList.ts","components/Posts/postsStyles.ts","components/UserProfile/UserProfileComponents/UsersPosts.tsx","hooks/useMediaQueries.ts"],"sourcesContent":["\r\nimport MasonryPostsDrawer from \"./MasonryPostsDrawer\";\r\n\r\nexport default MasonryPostsDrawer","import {IPost} from \"../../types/post\";\r\nimport {IPostsActions} from \"../../hooks/usePostsActions\";\r\nimport useMediaQueries from \"../../hooks/useMediaQueries\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport postsStyles from \"../Posts/postsStyles\";\r\nimport sortItemsForMasonryList from \"../../utils/sortItemsForMasonryList\";\r\nimport {Box, ImageList} from \"@mui/material\";\r\nimport PostItem from \"../PostItem\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function MasonryPostsDrawer({posts, postsActions}: {posts: IPost[], postsActions: IPostsActions}) {\r\n    const {isSmallerThanLaptop, isSmallerThanTablet} = useMediaQueries()\r\n    const postsListCols = isSmallerThanLaptop ? isSmallerThanTablet ? 2 : 3 : 5\r\n\r\n    const columns = Array.from({length: postsListCols})\r\n\r\n    const styles = useSx(postsStyles)\r\n\r\n    const sortedPostsForMasonryList = sortItemsForMasonryList(postsListCols, posts)\r\n\r\n    return (\r\n        <Box sx={{display: 'flex'}}>\r\n            {columns.map((_, index) => {\r\n                const postsLengthInOneColumn = Math.round(sortedPostsForMasonryList.length / postsListCols) || 1\r\n\r\n                const slicedPosts = sortedPostsForMasonryList.slice(index * postsLengthInOneColumn, index * postsLengthInOneColumn + postsLengthInOneColumn)\r\n\r\n                return (\r\n                    <ImageList\r\n                        variant=\"masonry\"\r\n                        sx={styles.postsList}\r\n                        gap={12}\r\n                        key={index}\r\n                        cols={1}\r\n                    >\r\n                        {slicedPosts.map((post) => <PostItem\r\n                            postsActions={postsActions}\r\n                            post={post}\r\n                            key={post._id}\r\n                        />)}\r\n                    </ImageList>\r\n                )\r\n            })}\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n// 1 ImageList = 1 column\r\n\r\n// for example: if postsListCols = 3\r\n// html: first column second column third column\r\n//             image         image        image\r\n//             image         image        image\r\n//             image         image        image\r\n//             image         image        image\r\n//etc...","export default function sortItemsForMasonryList(columnsLength: number, array: any[]) {\r\n    const result: any[] = []\r\n\r\n    for (let column = 0; column < columnsLength; column++) {\r\n        for (let columnItem = column; columnItem < array.length; columnItem += columnsLength) {\r\n            // console.log(`column ${column} columnItem ${columnItem}`)\r\n            result.push(array[columnItem])\r\n        }\r\n    }\r\n\r\n    // notSorted\r\n    // 0 5 10 15 20\r\n    // 1 6 11 16 21\r\n    // 2 7 12 17 22\r\n    // 3 8 13 18 23\r\n    // 4 9 14 19 24\r\n\r\n    // may sorted to be\r\n    // 0 - 0 5 - 1 10 - 2 15 - 3 20 - 4\r\n\r\n    return result\r\n}\r\n\r\n","import {Theme} from \"@mui/material\";\r\n\r\n\r\nconst postsStyles = (theme: Theme) => {\r\n\r\n\r\n    return {\r\n        container: {\r\n            py: 2,\r\n            px: 1,\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n\r\n            // height: '200vh'\r\n        },\r\n        errorContainer: {\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            height: '90vh',\r\n            maxHeight: '90vh'\r\n        },\r\n        postsList: {\r\n            width: '20%',\r\n            [theme.breakpoints.down('laptop')]: {\r\n                width: '33.33%'\r\n            },\r\n            [theme.breakpoints.down('tablet')]: {\r\n                width: '50%'\r\n            },\r\n            // mx: 'auto',\r\n            // my: 0,\r\n            margin: 1\r\n            // minHeight: '110vh'\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default postsStyles","import {useParams} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {extendedCollectionsApi, extendedPostsApi} from \"../../../redux/api/rootApi\";\r\nimport MiniLoader from \"../../Loaders/MiniLoader\";\r\nimport {Box, ImageList, Typography} from \"@mui/material\";\r\nimport usePostsActions from \"../../../hooks/usePostsActions\";\r\nimport useSx from \"../../../hooks/useSx\";\r\nimport postsStyles from \"../../Posts/postsStyles\";\r\nimport useMediaQueries from \"../../../hooks/useMediaQueries\";\r\nimport PostItem from \"../../PostItem\";\r\nimport useShortTranslation from \"../../../hooks/useShortTranslation\";\r\nimport MasonryPostsDrawer from \"../../MasonryPostsDrawer\";\r\n\r\n\r\nexport default function UsersPosts() {\r\n\r\n    const {id = ''} = useParams<{ id: string }>()!\r\n\r\n\r\n    const {data: initPosts, isLoading, isError} = extendedPostsApi.useGetPostsByUserIdQuery({id})\r\n\r\n    const [posts, postsActions] = usePostsActions({initPosts})\r\n\r\n    const styles = useSx(postsStyles)\r\n    const {isSmallerThanLaptop, isSmallerThanTablet} = useMediaQueries()\r\n\r\n    const postsListCols = isSmallerThanLaptop ? isSmallerThanTablet ? 2 : 3 : 5\r\n\r\n    const t = useShortTranslation({componentNameKey: 'UserProfile.UsersPosts'})\r\n\r\n    if (isLoading) {\r\n        return <MiniLoader/>\r\n    }\r\n\r\n    if (isError) {\r\n        return <Typography variant='h1'>{t('error')}</Typography>\r\n    }\r\n\r\n    if (!posts) {\r\n        return <Typography variant='h1'>{t('noPostsMessage')}</Typography>\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            sx={styles.container}\r\n        >\r\n            <MasonryPostsDrawer posts={posts} postsActions={postsActions}/>\r\n        </Box>\r\n    )\r\n}","import useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport {useTheme} from \"@mui/material\";\r\n\r\n\r\nconst useMediaQueries = () => {\r\n\r\n    const theme = useTheme()\r\n\r\n    const isSmallerThanLaptop = useMediaQuery(theme.breakpoints.down('laptop'));\r\n    const isSmallerThanTablet = useMediaQuery(theme.breakpoints.down('tablet'));\r\n    const isSmallerThanMobile = useMediaQuery(theme.breakpoints.down('mobile'));\r\n\r\n\r\n    return {\r\n        isSmallerThanLaptop,\r\n        isSmallerThanTablet,\r\n        isSmallerThanMobile\r\n    }\r\n}\r\n\r\nexport default useMediaQueries"],"names":["posts","postsActions","useMediaQueries","isSmallerThanLaptop","isSmallerThanTablet","postsListCols","columns","Array","from","length","styles","useSx","postsStyles","sortedPostsForMasonryList","columnsLength","array","result","column","columnItem","push","sortItemsForMasonryList","Box","sx","display","map","_","index","postsLengthInOneColumn","Math","round","slicedPosts","slice","ImageList","variant","postsList","gap","cols","post","PostItem","_id","theme","container","py","px","flexDirection","errorContainer","margin","alignItems","justifyContent","height","maxHeight","width","breakpoints","down","UsersPosts","useParams","id","extendedPostsApi","initPosts","data","isLoading","isError","usePostsActions","t","useShortTranslation","componentNameKey","useTheme","useMediaQuery","isSmallerThanMobile"],"sourceRoot":""}
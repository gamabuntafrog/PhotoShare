{"version":3,"file":"static/js/324.58243347.chunk.js","mappings":"8SAae,SAASA,IAEpB,IAA6C,GAA3BC,EAAAA,EAAAA,MAAXC,GAEP,ECZW,SAA+C,GAAuB,IAAtBA,EAAE,EAAFA,GAE3D,EAAmDC,EAAAA,EAAAA,+BAA+C,eAA3FC,EAAO,gBAAGC,KAAAA,OAAI,MAAG,GAAE,EAAEC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAEvC,GAAoCC,EAAAA,EAAAA,GAAoC,CAACJ,QAAAA,EAASE,UAAAA,EAAWC,QAAAA,EAASL,GAAAA,EAAIG,KAAAA,IAE1G,MAAO,CAACA,KAFY,EAAbI,cAEsBH,UAAAA,EAAWC,QAAAA,EAASG,IAFxB,EAAHA,IAEgCC,MAFtB,EAALA,MAG/B,CDKmDC,CAAsC,CAACV,QAF7E,MAAG,GAAE,IAEPG,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAkBC,GAAF,EAALI,MAAc,EAAPJ,SAASG,EAAG,EAAHA,IAExC,GAA8BG,EAAAA,EAAAA,GAAgB,CAACC,UAAWT,IAAM,eAAzDU,EAAK,KAAEC,EAAY,KACpBC,GAASC,EAAAA,EAAAA,GAAMC,EAAAA,GAEfC,GAAIC,EAAAA,EAAAA,GAAoB,CAACC,iBAAkB,0BAEjD,OAAIhB,GACO,SAACiB,EAAA,EAAU,IAGlBhB,GACO,SAACiB,EAAA,EAAU,CAACC,QAAQ,KAAI,SAAEL,EAAE,WAGlCL,GAKD,iCACI,SAACW,EAAA,EAAG,CACAC,GAAIV,EAAOW,UAAU,UAErB,SAACC,EAAA,QAAkB,CAACd,MAAOA,EAAOC,aAAcA,OAEpD,gBAAKN,IAAKA,QAVP,SAACc,EAAA,EAAU,CAACC,QAAQ,KAAI,SAAEL,EAAE,mBAc3C,C","sources":["components/UserProfile/UserProfileComponents/UsersPosts.tsx","redux/api/hooks/useGetPostsByUserIdWithInfiniteScroll.ts"],"sourcesContent":["import {useParams} from \"react-router-dom\";\r\nimport React, {useEffect} from \"react\";\r\nimport MiniLoader from \"../../Loaders/MiniLoader\";\r\nimport {Box, ImageList, Typography} from \"@mui/material\";\r\nimport usePostsActions from \"../../../hooks/usePostsActions\";\r\nimport useSx from \"../../../hooks/useSx\";\r\nimport postsStyles from \"../../Posts/postsStyles\";\r\nimport useShortTranslation from \"../../../hooks/useShortTranslation\";\r\nimport MasonryPostsDrawer from \"../../MasonryPostsDrawer\";\r\nimport useGetPostsByUserIdWithInfiniteScroll from \"../../../redux/api/hooks/useGetPostsByUserIdWithInfiniteScroll\";\r\nimport extendedPostsApi from \"../../../redux/api/extendedPostsApi\";\r\n\r\n\r\nexport default function UsersPosts() {\r\n\r\n    const {id = ''} = useParams<{ id: string }>()!\r\n\r\n    const {data, isLoading, isEnd, isError, ref} = useGetPostsByUserIdWithInfiniteScroll({id})\r\n    // const {data = [], isLoading, isError} = extendedPostsApi.useGetPostsByUserIdQuery({id, page: 1, arrayOfId: []})\r\n    const [posts, postsActions] = usePostsActions({initPosts: data})\r\n    const styles = useSx(postsStyles)\r\n\r\n    const t = useShortTranslation({componentNameKey: 'UserProfile.UserPosts'})\r\n\r\n    if (isLoading) {\r\n        return <MiniLoader/>\r\n    }\r\n\r\n    if (isError) {\r\n        return <Typography variant='h1'>{t('error')}</Typography>\r\n    }\r\n\r\n    if (!posts) {\r\n        return <Typography variant='h1'>{t('noPostsMessage')}</Typography>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={styles.container}\r\n            >\r\n                <MasonryPostsDrawer posts={posts} postsActions={postsActions}/>\r\n            </Box>\r\n            <div ref={ref} />\r\n        </>\r\n    )\r\n    // return <div/>\r\n}","import extendedPostsApi from \"../extendedPostsApi\";\r\nimport useInfiniteScrollForSearchBuIdQuery from \"../../../hooks/useInfiniteScrollForSearchBuIdQuery\";\r\n\r\n\r\n\r\nexport default function useGetPostsByUserIdWithInfiniteScroll({id}: { id: string }) {\r\n\r\n    const [trigger, {data = [], isLoading, isError}] = extendedPostsApi.useLazyGetPostsByUserIdQuery()\r\n\r\n    const {paginatedData, ref, isEnd} = useInfiniteScrollForSearchBuIdQuery({trigger, isLoading, isError, id, data})\r\n\r\n    return {data: paginatedData, isLoading, isError, ref, isEnd}\r\n}"],"names":["UsersPosts","useParams","id","extendedPostsApi","trigger","data","isLoading","isError","useInfiniteScrollForSearchBuIdQuery","paginatedData","ref","isEnd","useGetPostsByUserIdWithInfiniteScroll","usePostsActions","initPosts","posts","postsActions","styles","useSx","postsStyles","t","useShortTranslation","componentNameKey","MiniLoader","Typography","variant","Box","sx","container","MasonryPostsDrawer"],"sourceRoot":""}
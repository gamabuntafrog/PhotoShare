{"version":3,"file":"static/js/414.cd9eb764.chunk.js","mappings":"qRAkCA,EA/BuB,SAACA,GAIpB,MAAO,CACHC,UAAW,CACPC,UAAW,OACXC,GAAI,EACJC,GAAI,GAERC,OAAM,QACFC,WAAY,MAAOC,UAAW,UAC7BP,EAAMQ,YAAYC,KAAK,UAAY,CAChCC,SAAU,KAGlBC,QAAS,CAACC,QAAS,OAAQC,cAAe,SAAUC,WAAY,SAAUC,GAAI,GAC9EC,gBAAiB,CAACC,GAAI,EAAGC,MAAO,gBAChCC,WAAY,CACRP,QAAS,OACTQ,SAAU,OACVP,cAAe,MACfQ,eAAgB,UAEpBC,UAAW,CAACC,MAAO,QACnBC,YAAa,SAACN,GACV,MAAO,CAACO,QAAQ,GAAD,OAAKP,EAAK,eAC7B,EAER,E,kDC/BA,MCsBe,WACX,IAAMlB,GAAQ0B,EAAAA,EAAAA,KACRC,GAAWC,EAAAA,EAAAA,KASXC,GAAIC,EAAAA,EAAAA,GAAoB,CAACC,iBAAkB,aAE3CC,EAAuC,SAAvBhC,EAAMiC,QAAQC,KAAkBL,EAAE,oBAAsBA,EAAE,mBAE1EM,GAASC,EAAAA,EAAAA,GAAMC,GAErB,OACI,iCACI,SAACC,EAAA,EAAc,CAACC,WAAW,cAC3B,UAACC,EAAA,EAAS,CACNC,GAAIN,EAAOlC,UAAU,WAErB,SAACyC,EAAA,EAAU,CAACC,QAAQ,KAAKF,GAAIN,EAAO9B,MAAM,SAAEwB,EAAE,YAC9C,UAACe,EAAA,EAAG,CAACH,GAAIN,EAAOxB,QAAQ,WACpB,SAAC+B,EAAA,EAAU,CAACC,QAAQ,KAAI,SAAEd,EAAE,0BAC5B,UAACe,EAAA,EAAG,CAACH,GAAI,CAAC7B,QAAS,OAAQG,GAAI,EAAG8B,GAAI,GAAG,WACrC,SAACC,EAAA,EAAM,CACHH,QAAQ,WACRI,QAAS,kBAAMC,EAAAA,EAAAA,eAAoB,QAAQ,EAAC,SAE3CnB,EAAE,oBAEP,SAACiB,EAAA,EAAM,CACHH,QAAQ,WACRF,GAAI,CAACQ,GAAI,GACTF,QAAS,kBAAMC,EAAAA,EAAAA,eAAoB,KAAK,EAAC,SAExCnB,EAAE,yBAGX,SAACa,EAAA,EAAU,CAACnC,UAAU,SAASoC,QAAQ,KAAI,SAAEd,EAAE,uBAC/C,SAACiB,EAAA,EAAM,CACHH,QAAQ,WACRF,GAAIN,EAAOnB,gBACX+B,QArCI,WACpBpB,GAASuB,EAAAA,EAAAA,MACb,EAoCoBhC,MAAM,UAAS,SAEdc,KAEL,SAACmB,EAAA,EAAI,CACDV,GAAIN,EAAOhB,WAAW,SAErBiC,EAAAA,EAAAA,KAAgB,SAAClC,EAAOmC,GACrB,OACI,SAACC,EAAA,GAAQ,CAELb,GAAIN,EAAOb,UAAU,UAErB,SAACwB,EAAA,EAAM,CACHH,QAAQ,YACRF,GAAIN,EAAOX,YAAYN,EAAMqC,IAAI,MACjCR,QAAS,kBA1DlB,SAAC7B,GACxBS,GAAS6B,EAAAA,EAAAA,IAAgBtC,GAC7B,CAwDmDuC,CAAmBvC,EAAMwC,KAAK,EAAC,SAE7CxC,EAAMb,MAAM2C,EAAAA,EAAAA,qBARZK,EAYjB,cAMxB,C","sources":["components/Settings/settingsStyles.ts","components/Settings/index.ts","components/Settings/Settings.tsx"],"sourcesContent":["import {Theme} from \"@mui/material\";\r\n\r\n\r\nconst settingsStyles = (theme: Theme) => {\r\n\r\n\r\n\r\n    return {\r\n        container: {\r\n            minHeight: '90vh',\r\n            pt: 4,\r\n            pb: 2\r\n        },\r\n        title: {\r\n            fontWeight: '600', textAlign: 'center',\r\n            [theme.breakpoints.down('tablet')]: {\r\n                fontSize: 70\r\n            }\r\n        },\r\n        wrapper: {display: 'flex', flexDirection: 'column', alignItems: 'center', mt: 2},\r\n        colorModeButton: {my: 2, color: 'primary.main'},\r\n        colorsList: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            flexDirection: 'row',\r\n            justifyContent: 'center'\r\n        },\r\n        colorItem: {width: 'auto'},\r\n        colorButton: (color: string) => {\r\n            return {bgcolor: `${color} !important`}\r\n        }\r\n    }\r\n}\r\n\r\nexport default settingsStyles","import Settings from './Settings'\r\nexport default Settings","import {\r\n    Box,\r\n    Button,\r\n    Container,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    Typography,\r\n    useTheme\r\n} from \"@mui/material\";\r\nimport colorTypes from \"../../types/colorTypes\";\r\nimport {useAppDispatch} from \"../../redux/hooks\";\r\nimport {setPrimaryColor, toggleColorMode} from \"../../redux/slices/themeSlice\";\r\nimport {colorsArray} from \"../../utils/colors\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport settingsStyles from \"./settingsStyles\";\r\nimport i18n from \"../../utils/language/i18n\";\r\nimport React from \"react\";\r\nimport useShortTranslation from \"../../hooks/useShortTranslation\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport StandardHelmet from \"../StandardHelmet\";\r\n\r\n\r\nexport default function Settings() {\r\n    const theme = useTheme();\r\n    const dispatch = useAppDispatch()\r\n\r\n    const changePrimaryColor = (color: colorTypes) => {\r\n        dispatch(setPrimaryColor(color))\r\n    }\r\n\r\n    const changeColorMode = () => {\r\n        dispatch(toggleColorMode())\r\n    }\r\n    const t = useShortTranslation({componentNameKey: 'Settings'});\r\n\r\n    const nextThemeMode = theme.palette.mode === 'dark' ? t('chooseLightTheme') : t('chooseDarkTheme')\r\n\r\n    const styles = useSx(settingsStyles)\r\n\r\n    return (\r\n        <>\r\n            <StandardHelmet keyOfTitle='settings'/>\r\n            <Container\r\n                sx={styles.container}\r\n            >\r\n                <Typography variant='h1' sx={styles.title}>{t('title')}</Typography>\r\n                <Box sx={styles.wrapper}>\r\n                    <Typography variant='h2'>{t('chooseLanguageTitle')}</Typography>\r\n                    <Box sx={{display: 'flex', mt: 2, mb: 4}}>\r\n                        <Button\r\n                            variant='outlined'\r\n                            onClick={() => i18n.changeLanguage('en-US')}\r\n                        >\r\n                            {t('chooseEnglish')}\r\n                        </Button>\r\n                        <Button\r\n                            variant='outlined'\r\n                            sx={{ml: 2}}\r\n                            onClick={() => i18n.changeLanguage('uk')}\r\n                        >\r\n                            {t('chooseUkrainian')}\r\n                        </Button>\r\n                    </Box>\r\n                    <Typography textAlign='center' variant='h2'>{t('chooseColorTitle')}</Typography>\r\n                    <Button\r\n                        variant='outlined'\r\n                        sx={styles.colorModeButton}\r\n                        onClick={changeColorMode}\r\n                        color=\"inherit\"\r\n                    >\r\n                        {nextThemeMode}\r\n                    </Button>\r\n                    <List\r\n                        sx={styles.colorsList}\r\n                    >\r\n                        {colorsArray.map((color, index) => {\r\n                            return (\r\n                                <ListItem\r\n                                    key={index}\r\n                                    sx={styles.colorItem}\r\n                                >\r\n                                    <Button\r\n                                        variant='contained'\r\n                                        sx={styles.colorButton(color.ref[700])}\r\n                                        onClick={() => changePrimaryColor(color.enum)}\r\n                                    >\r\n                                        {color.title[i18n.resolvedLanguage as 'en-US' | 'uk']}\r\n                                    </Button>\r\n                                </ListItem>\r\n                            )\r\n                        })}\r\n                    </List>\r\n                </Box>\r\n            </Container>\r\n        </>\r\n    )\r\n}"],"names":["theme","container","minHeight","pt","pb","title","fontWeight","textAlign","breakpoints","down","fontSize","wrapper","display","flexDirection","alignItems","mt","colorModeButton","my","color","colorsList","flexWrap","justifyContent","colorItem","width","colorButton","bgcolor","useTheme","dispatch","useAppDispatch","t","useShortTranslation","componentNameKey","nextThemeMode","palette","mode","styles","useSx","settingsStyles","StandardHelmet","keyOfTitle","Container","sx","Typography","variant","Box","mb","Button","onClick","i18n","ml","toggleColorMode","List","colorsArray","index","ListItem","ref","setPrimaryColor","changePrimaryColor","enum"],"sourceRoot":""}
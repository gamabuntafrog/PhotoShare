{"version":3,"file":"static/js/67.099f9d9d.chunk.js","mappings":"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","sources":["components/CreateCollectionModal/createCollectionModalStyles.ts","components/CreateCollectionModal/CreateCollectionModal.tsx","components/CreateCollectionModal/index.ts","hooks/useMediaQueries.ts","components/PostItem/postItemStyles.ts","components/PostItem/PostItemComponents/PostItemBottomButtonsWrapper.tsx","components/PostItem/PostItemComponents/PostItemTitle.tsx","components/PostItem/index.ts","components/PostItem/PostItem.tsx","components/MasonryPostsDrawer/index.ts","components/MasonryPostsDrawer/MasonryPostsDrawer.tsx","utils/sortItemsForMasonryList.ts","components/PostSavesInfo/postSavesInfoStyles.ts","components/PostSavesInfo/index.ts","components/PostSavesInfo/PostSavesInfo.tsx","components/Posts/postsStyles.ts","hooks/useAnchorEl.ts"],"sourcesContent":["import {Theme} from \"@mui/material\";\r\n\r\nconst createCollectionModalStyles = (theme: Theme) => {\r\n\r\n\r\n    return {\r\n        backdrop: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n        },\r\n        wrapper: {\r\n            bgcolor: 'background.default',\r\n            mx: 2,\r\n            py: 2,\r\n            px: 2,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            minHeight: '50vh',\r\n            borderRadius: 4,\r\n        },\r\n        title: {\r\n            color: theme.palette.text.standard,\r\n            textAlign: 'center',\r\n            mx: 'auto',\r\n            my: 2,\r\n            wordBreak: 'break-word'\r\n        },\r\n        form: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            width: '90%',\r\n        } as const,\r\n        label: {my: 1},\r\n        submitButton: {alignSelf: 'end', mt: 2}\r\n    }\r\n}\r\n\r\nexport default createCollectionModalStyles","import {useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup/dist/yup\";\r\nimport {Button, Container, IconButton, InputLabel, Modal, OutlinedInput, Typography, useTheme} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {collectionValidationSchema} from \"../../utils/validationSchemas\";\r\nimport {updateSavesInfo} from \"../../hooks/usePostsActions\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport useSx from \"../../hooks/useSx\";\r\nimport createCollectionStyles from \"./createCollectionModalStyles\";\r\nimport useShortTranslation from \"../../hooks/useShortTranslation\";\r\nimport StandardHelmet from \"../StandardHelmet\";\r\nimport MiniLoader from \"../Loaders/MiniLoader\";\r\nimport extendedCollectionsApi from \"../../redux/api/extendedCollectionsApi\";\r\n\r\ninterface ICollectionFormData {\r\n    title: string,\r\n    tags: string,\r\n}\r\n\r\ninterface ICreateCollectionModalProps {\r\n    closeModal: () => void,\r\n    isModalOpen: boolean,\r\n    onCreate?: updateSavesInfo,\r\n    postId?: string,\r\n    refetch?: () => void\r\n}\r\n\r\nconst isFunction = (any: any): any is Function => typeof any === 'function'\r\n\r\nexport default function CreateCollectionModal(\r\n    {\r\n        closeModal,\r\n        isModalOpen,\r\n        onCreate,\r\n        refetch,\r\n        postId\r\n    }: ICreateCollectionModalProps) {\r\n\r\n    const [createCollection, {isLoading: isCollectionCreatingLoading}] = extendedCollectionsApi.useCreateCollectionMutation()\r\n\r\n    const {\r\n        register,\r\n        reset: resetForm,\r\n        handleSubmit,\r\n        formState: {errors: {title: titleError, tags: tagsError}}\r\n    } = useForm<ICollectionFormData>({\r\n        resolver: yupResolver(collectionValidationSchema),\r\n        mode: 'all'\r\n    });\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const onSubmit = handleSubmit(({title, tags}) => {\r\n        const formattedTags = tags.split(' ')\r\n\r\n        createNewUserCollection({title, tags: formattedTags})\r\n    })\r\n\r\n    const createNewUserCollection = async (body: { title: string, tags: string[] }) => {\r\n\r\n        try {\r\n            const response = await createCollection({body}).unwrap()\r\n\r\n            resetForm()\r\n            closeModal()\r\n\r\n            if (isFunction(onCreate)) {\r\n                onCreate(body.title, response.data.collection._id, postId as string)\r\n            }\r\n\r\n            if (isFunction(refetch)) {\r\n\r\n                refetch()\r\n                navigate(`/post/create/${response.data.collection._id}`)\r\n            }\r\n\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    const styles = useSx(createCollectionStyles)\r\n\r\n    const t = useShortTranslation({componentNameKey: 'CreateCollectionModal'})\r\n\r\n    const titleLabel = titleError?.message ? t(titleError.message) : t('titleLabel')\r\n    const tagsLabel = tagsError?.message ? t(tagsError.message) : t('tagsLabel')\r\n\r\n    return (\r\n        <>\r\n            {isModalOpen && (\r\n                <StandardHelmet keyOfTitle='createCollectionModal'/>\r\n            )}\r\n            <Modal\r\n                open={isModalOpen}\r\n                onClose={closeModal}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n                sx={styles.backdrop}\r\n            >\r\n                <Container\r\n                    sx={styles.wrapper}\r\n                    maxWidth='tablet'\r\n                >\r\n                    {isCollectionCreatingLoading ?\r\n                        <MiniLoader withMeta/>\r\n                        :\r\n                        <>\r\n                            <IconButton color='error' sx={{alignSelf: 'end'}} onClick={closeModal}>\r\n                                <CloseIcon/>\r\n                            </IconButton>\r\n                            <Typography\r\n                                variant='h3'\r\n                                sx={styles.title}\r\n                            >\r\n                                {t('title')}\r\n                            </Typography>\r\n                            <form style={styles.form} onSubmit={onSubmit}>\r\n                                <InputLabel htmlFor='title' error={!!titleError} sx={styles.label}>\r\n                                    {titleLabel}\r\n                                </InputLabel>\r\n                                <OutlinedInput fullWidth id='title' {...register('title')}/>\r\n                                <InputLabel htmlFor='tags' error={!!tagsError} sx={styles.label}>\r\n                                    {tagsLabel}\r\n                                </InputLabel>\r\n                                <OutlinedInput fullWidth id='tags' {...register('tags')}/>\r\n                                <Button type='submit' variant='outlined'\r\n                                        sx={styles.submitButton}>{t('submitButton')}</Button>\r\n                            </form>\r\n                        </>\r\n                    }\r\n                </Container>\r\n            </Modal>\r\n        </>\r\n    )\r\n}","import CreateCollectionModal from './CreateCollectionModal';\r\n\r\nexport default CreateCollectionModal","import useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport {useTheme} from \"@mui/material\";\r\n\r\n\r\nconst useMediaQueries = () => {\r\n\r\n    const theme = useTheme()\r\n\r\n    const isSmallerThanLaptop = useMediaQuery(theme.breakpoints.down('laptop'));\r\n    const isSmallerThanTablet = useMediaQuery(theme.breakpoints.down('tablet'));\r\n    const isSmallerThanMobile = useMediaQuery(theme.breakpoints.down('mobile'));\r\n\r\n\r\n    return {\r\n        isSmallerThanLaptop,\r\n        isSmallerThanTablet,\r\n        isSmallerThanMobile\r\n    }\r\n}\r\n\r\nexport default useMediaQueries","import {styled, Theme} from \"@mui/material\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst postItemStyles = (theme: Theme) => {\r\n\r\n    const {palette} = theme\r\n    const {primary} = palette\r\n\r\n    return {\r\n        postItem: {\r\n            display: 'inline-block',\r\n            '&:hover .buttonsBar': {\r\n                opacity: 1\r\n            },\r\n            width: '100%'\r\n        },\r\n        postItemWrapper: {\r\n            position: 'relative',\r\n            '&:hover .postImage': {\r\n                filter: 'brightness(80%)',\r\n            },\r\n        },\r\n        image: {\r\n            width: '100%',\r\n            borderRadius: '8px',\r\n            backgroundColor: primary.main\r\n        },\r\n        postTopButtonsWrapper: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: 0.5,\r\n            position: 'absolute',\r\n            top: '0',\r\n            right: '0',\r\n            zIndex: 100,\r\n            opacity: 0,\r\n            [theme.breakpoints.down('laptop')]: {\r\n                opacity: 100,\r\n            }\r\n        },\r\n        postBottomButtonsWrapper: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: 0.5,\r\n            position: 'absolute',\r\n            top: '100%',\r\n            transform: 'translateY(-110%)',\r\n            zIndex: 100,\r\n            opacity: 0,\r\n            color: theme.palette.text.light,\r\n            [theme.breakpoints.down('laptop')]: {\r\n                opacity: 100,\r\n            }\r\n        },\r\n        postItemTitleWrapper: {\r\n            px: 0.5,\r\n            pb: 1,\r\n            whiteSpace: 'break-spaces',\r\n            wordBreak: 'break-all',\r\n            [theme.breakpoints.down('tablet')]: {\r\n                pl: 0.5,\r\n                pr: 0,\r\n                pb: 0\r\n            }\r\n        },\r\n        authorAvatar: {\r\n            width: '40px',\r\n            height: '40px',\r\n            [theme.breakpoints.down('tablet')]: {\r\n                width: 32,\r\n                height: 32\r\n            }\r\n        },\r\n        authorUsername: {\r\n            ml: 1,\r\n        },\r\n    }\r\n}\r\n\r\nexport default postItemStyles\r\n\r\nexport const StyledNavLink = styled(NavLink)(({theme}) => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'start',\r\n    '&:hover p': {\r\n        color: theme.palette.primary.main\r\n    }\r\n}))","import {Box, IconButton, Typography} from \"@mui/material\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport React from \"react\";\r\nimport useSx from \"../../../hooks/useSx\";\r\nimport postItemStyles from \"../postItemStyles\";\r\n\r\ninterface IPostItemLikesContainerProps {\r\n    onToggleLike: () => void,\r\n    isLiked: boolean,\r\n    likesCount: number\r\n}\r\n\r\nexport default function PostItemBottomButtonsWrapper({onToggleLike, isLiked, likesCount}: IPostItemLikesContainerProps) {\r\n\r\n    const styles = useSx(postItemStyles)\r\n\r\n    return (\r\n        <Box\r\n            sx={styles.postBottomButtonsWrapper}\r\n            className='buttonsBar'\r\n        >\r\n            <IconButton sx={{color: 'currentColor'}} onClick={onToggleLike}>\r\n                {isLiked ? <FavoriteIcon color='secondary'/> : <FavoriteBorderIcon/>}\r\n            </IconButton>\r\n            <Typography sx={{ml: 0.5, color: 'currentColor'}}>\r\n                {likesCount}\r\n            </Typography>\r\n        </Box>\r\n    )\r\n}","import {Avatar, Box, Typography} from \"@mui/material\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport useSx from \"../../../hooks/useSx\";\r\nimport postItemStyles, {StyledNavLink} from \"../postItemStyles\";\r\n\r\n\r\ninterface IPostItemTitleProps {\r\n    postId: string,\r\n    title: string,\r\n    formattedTags: string,\r\n    authorId: string,\r\n    avatarURL: string | null,\r\n    username: string,\r\n    showAuthor: boolean\r\n}\r\n\r\nexport default function PostItemTitle({postId, title, formattedTags, authorId, avatarURL, username, showAuthor}: IPostItemTitleProps) {\r\n\r\n    const styles = useSx(postItemStyles)\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={styles.postItemTitleWrapper}\r\n            >\r\n                <NavLink to={`/posts/${postId}`}>\r\n                    <Typography sx={{mb: '-4px'}}  variant='h6'>{title}</Typography>\r\n                    <Typography variant='caption'>{formattedTags}</Typography>\r\n                </NavLink>\r\n            </Box>\r\n            {showAuthor && (\r\n                <StyledNavLink to={`/users/${authorId}`}>\r\n                    <Avatar sx={styles.authorAvatar} src={avatarURL || ''}/>\r\n                    <Typography className='username' sx={styles.authorUsername}>{username}</Typography>\r\n                </StyledNavLink>\r\n            )}\r\n        </>\r\n    )\r\n}","import PostItem from './PostItem'\r\nexport default PostItem","import {\r\n    Box,\r\n    ImageListItem,\r\n    ImageListItemBar,\r\n} from \"@mui/material\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {IPost, ISavesInfo} from \"../../types/post\";\r\nimport React, {Dispatch, useState} from \"react\";\r\nimport {IPostsActions} from \"../../hooks/usePostsActions\";\r\nimport PostSavesInfo from \"../PostSavesInfo\";\r\nimport CreateCollectionModal from \"../CreateCollectionModal\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport postItemStyles from \"./postItemStyles\";\r\nimport PostItemBottomButtonsWrapper from \"./PostItemComponents/PostItemBottomButtonsWrapper\";\r\nimport PostItemTitle from \"./PostItemComponents/PostItemTitle\";\r\n\r\ninterface IPostItemProps {\r\n    post: IPost,\r\n    postsActions: IPostsActions,\r\n    showAuthor?: boolean\r\n}\r\n\r\n\r\nexport default function PostItem({post, postsActions, showAuthor = true}: IPostItemProps) {\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const {toggleLike, toggleSave, updateSavesInfo} = postsActions\r\n\r\n    const {\r\n        _id: postId,\r\n        author,\r\n        title,\r\n        tags,\r\n        likesCount,\r\n        image: postImageURL,\r\n        isLiked,\r\n        isSomewhereSaved: isSaved,\r\n        savesInfo\r\n    } = post\r\n\r\n    const {username, _id: authorId, avatar: avatarURL = ''} = author\r\n\r\n    const formattedTags = tags.join(' ')\r\n\r\n    const styles = useSx(postItemStyles)\r\n\r\n    const openModal = () => setIsModalOpen(true)\r\n    const closeModal = () => setIsModalOpen(false)\r\n    const onToggleLike = () => toggleLike(postId, isLiked)\r\n\r\n\r\n    return (\r\n        <>\r\n            <CreateCollectionModal\r\n                onCreate={updateSavesInfo}\r\n                postId={post._id}\r\n                closeModal={closeModal}\r\n                isModalOpen={isModalOpen}\r\n            />\r\n            <ImageListItem\r\n                key={postId}\r\n                sx={styles.postItem}\r\n            >\r\n                <Box\r\n                    sx={styles.postItemWrapper}\r\n                >\r\n                    <NavLink to={`/posts/${postId}`}>\r\n                        <img\r\n                            src={postImageURL}\r\n                            style={styles.image}\r\n                            className='postImage'\r\n                            alt={title}\r\n                            loading='lazy'\r\n                            role='presentation'\r\n                            decoding='async'\r\n                        />\r\n                    </NavLink>\r\n                    <Box\r\n                        sx={styles.postTopButtonsWrapper}\r\n                        className='buttonsBar'\r\n                    >\r\n                        <PostSavesInfo\r\n                            collections={savesInfo}\r\n                            toggleSave={toggleSave}\r\n                            postId={postId}\r\n                            isSaved={isSaved}\r\n                            openModal={openModal}\r\n                        />\r\n                    </Box>\r\n                    <PostItemBottomButtonsWrapper\r\n                        onToggleLike={onToggleLike}\r\n                        isLiked={isLiked}\r\n                        likesCount={likesCount}\r\n                    />\r\n                </Box>\r\n                <ImageListItemBar\r\n                    position=\"below\"\r\n                    sx={{\r\n                        '& .MuiImageListItemBar-titleWrap': {\r\n                            padding: 0\r\n                        }\r\n                    }}\r\n                    title={\r\n                        <PostItemTitle\r\n                            showAuthor={showAuthor}\r\n                            postId={postId}\r\n                            title={title}\r\n                            formattedTags={formattedTags}\r\n                            authorId={authorId}\r\n                            avatarURL={avatarURL}\r\n                            username={username}\r\n                        />\r\n                    }\r\n                />\r\n            </ImageListItem>\r\n        </>\r\n    )\r\n}\r\n\r\n","\r\nimport MasonryPostsDrawer from \"./MasonryPostsDrawer\";\r\n\r\nexport default MasonryPostsDrawer","import {IPost} from \"../../types/post\";\r\nimport {IPostsActions} from \"../../hooks/usePostsActions\";\r\nimport useMediaQueries from \"../../hooks/useMediaQueries\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport postsStyles from \"../Posts/postsStyles\";\r\nimport sortItemsForMasonryList from \"../../utils/sortItemsForMasonryList\";\r\nimport {Box, ImageList} from \"@mui/material\";\r\nimport PostItem from \"../PostItem\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function MasonryPostsDrawer({posts, postsActions}: {posts: IPost[], postsActions: IPostsActions}) {\r\n    const {isSmallerThanLaptop, isSmallerThanTablet} = useMediaQueries()\r\n    const postsListCols = isSmallerThanLaptop ? isSmallerThanTablet ? 2 : 3 : 5\r\n\r\n    const columns = Array.from({length: postsListCols})\r\n\r\n    const styles = useSx(postsStyles)\r\n\r\n    const sortedPostsForMasonryList = sortItemsForMasonryList(postsListCols, posts)\r\n\r\n    return (\r\n        <Box sx={{display: 'flex'}}>\r\n            {columns.map((_, index) => {\r\n                const postsLengthInOneColumn = Math.round(sortedPostsForMasonryList.length / postsListCols) || 1\r\n\r\n                const slicedPosts = sortedPostsForMasonryList.slice(index * postsLengthInOneColumn, index * postsLengthInOneColumn + postsLengthInOneColumn)\r\n\r\n                return (\r\n                    <ImageList\r\n                        variant=\"masonry\"\r\n                        sx={styles.postsList}\r\n                        gap={12}\r\n                        key={index}\r\n                        cols={1}\r\n                    >\r\n                        {slicedPosts.map((post) => <PostItem\r\n                            postsActions={postsActions}\r\n                            post={post}\r\n                            key={post._id}\r\n                        />)}\r\n                    </ImageList>\r\n                )\r\n            })}\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n// 1 ImageList = 1 column\r\n\r\n// for example: if postsListCols = 3\r\n// html: first column second column third column\r\n//             image         image        image\r\n//             image         image        image\r\n//             image         image        image\r\n//             image         image        image\r\n//etc...\r\n// ЦЕ ПРИДУМАВ Я А НЕ CHATGPT!!!!!!!! (я серйозно)","export default function sortItemsForMasonryList(columnsLength: number, array: any[]) {\r\n    const result: any[] = []\r\n\r\n    for (let column = 0; column < columnsLength; column++) {\r\n        for (let columnItem = column; columnItem < array.length; columnItem += columnsLength) {\r\n            // console.log(`column ${column} columnItem ${columnItem}`)\r\n            result.push(array[columnItem])\r\n        }\r\n    }\r\n\r\n    // notSorted\r\n    // 0 5 10 15 20\r\n    // 1 6 11 16 21\r\n    // 2 7 12 17 22\r\n    // 3 8 13 18 23\r\n    // 4 9 14 19 24\r\n\r\n    // may sorted to be\r\n    // 0 - 0 5 - 1 10 - 2 15 - 3 20 - 4\r\n\r\n    return result\r\n}\r\n\r\n","import {Theme} from \"@mui/material\";\r\n\r\n\r\nconst postSavesInfoStyles = (theme: Theme) => {\r\n\r\n\r\n    return {\r\n        wrapper: {\r\n            ml: 'auto'\r\n        },\r\n        openMenuButton: {ml: 'auto', color: theme.palette.text.light},\r\n        menuList: {\r\n            backgroundColor: 'rgba(0, 0, 0, 0.2)',\r\n            '& .MuiPaper-root': {\r\n                bgcolor: 'background.paper',\r\n                maxHeight: '300px',\r\n            },\r\n            '& .MuiMenu-list': {\r\n                bgcolor: 'background.paper',\r\n                py: 0\r\n            }\r\n        },\r\n        menuItem: {\r\n            '&:hover .saveActionButton': {\r\n                display: 'flex'\r\n            },\r\n            bgcolor: 'background.paper',\r\n            position: 'relative'\r\n        },\r\n        menuItemButton: {position: 'absolute', right: 8, display: 'none'},\r\n        staticButtonsWrapper: {\r\n            bgcolor: 'background.paper',\r\n            px: 1,\r\n            py: 1,\r\n            position: 'sticky',\r\n            bottom: '-1px',\r\n            '&:hover': {\r\n                bgcolor: 'background.paper',\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default postSavesInfoStyles","import PostSavesInfo from './PostSavesInfo';\r\nexport default PostSavesInfo","import {ISavesInfo} from \"../../types/post\";\r\nimport {toggleSaveType} from \"../../hooks/usePostsActions\";\r\nimport useAnchorEl from \"../../hooks/useAnchorEl\";\r\nimport {Box, Button, IconButton, ListItemText, Menu, MenuItem, useTheme} from \"@mui/material\";\r\nimport BookmarkAddedIcon from \"@mui/icons-material/BookmarkAdded\";\r\nimport BookmarkBorderIcon from \"@mui/icons-material/BookmarkBorder\";\r\nimport React from \"react\";\r\nimport useSx from \"../../hooks/useSx\";\r\nimport postSavesInfoStyles from \"./postSavesInfoStyles\";\r\nimport useShortTranslation from \"../../hooks/useShortTranslation\";\r\n\r\ninterface ISavesInfoProps {\r\n    collections: ISavesInfo[],\r\n    toggleSave: toggleSaveType,\r\n    postId: string,\r\n    isSaved: boolean,\r\n    openModal: () => void\r\n}\r\n\r\nexport default function PostSavesInfo({collections, toggleSave, postId, isSaved, openModal}: ISavesInfoProps) {\r\n\r\n    const {anchorEl, isAnchorEl, handleClick, handleClose} = useAnchorEl()\r\n\r\n    const onToggleSave = (postId: string, collectionId: string, isSaved: boolean) => {\r\n        handleClose()\r\n        toggleSave(postId, collectionId, isSaved)\r\n    }\r\n\r\n    const t = useShortTranslation({componentNameKey: 'PostSavesInfo'})\r\n\r\n    const styles = useSx(postSavesInfoStyles)\r\n\r\n\r\n    return (\r\n        <Box sx={styles.wrapper}>\r\n            <IconButton\r\n                id=\"basic-button\"\r\n                aria-controls={isAnchorEl ? 'basic-menu' : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={isAnchorEl ? 'true' : undefined}\r\n                onClick={handleClick}\r\n                sx={styles.openMenuButton}\r\n            >\r\n                {isSaved ? <BookmarkAddedIcon/> : <BookmarkBorderIcon/>}\r\n            </IconButton>\r\n            <Menu\r\n                id=\"basic-menu\"\r\n                anchorEl={anchorEl}\r\n                open={isAnchorEl}\r\n                onClose={handleClose}\r\n                MenuListProps={{\r\n                    'aria-labelledby': 'basic-button',\r\n                }}\r\n                sx={styles.menuList}\r\n            >\r\n                {collections.map(({title, isSaved, collectionId}) => {\r\n                    const postActionLabel = isSaved ? t('deletePostButton') : t('savePostButton')\r\n\r\n                    return (\r\n                        <MenuItem sx={styles.menuItem} key={collectionId} onClick={() => onToggleSave(postId, collectionId, isSaved)}>\r\n                            <ListItemText sx={{mr: 1}}>\r\n                                {title}\r\n                            </ListItemText>\r\n                            <Button\r\n                                className='saveActionButton'\r\n                                color={isSaved ? 'error' : 'success'}\r\n                                sx={styles.menuItemButton}\r\n                                variant='contained'\r\n                            >\r\n                                {postActionLabel}\r\n                            </Button>\r\n                        </MenuItem>\r\n                    )\r\n                })}\r\n                <Box\r\n                    sx={styles.staticButtonsWrapper}\r\n                >\r\n                    <Button\r\n                        variant='contained'\r\n                        onClick={() => {\r\n                            handleClose()\r\n                            openModal()\r\n                        }}\r\n                    >\r\n                        {t('createNewCollectionButton')}\r\n                    </Button>\r\n                </Box>\r\n            </Menu>\r\n        </Box>\r\n    )\r\n}\r\n","import {Theme} from \"@mui/material\";\r\n\r\n\r\nconst postsStyles = (theme: Theme) => {\r\n\r\n\r\n    return {\r\n        container: {\r\n            py: 2,\r\n            px: 1,\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n\r\n            // height: '200vh'\r\n        },\r\n        errorContainer: {\r\n            margin: '0 auto',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            height: '90vh',\r\n            maxHeight: '90vh'\r\n        },\r\n        postsList: {\r\n            width: '20%',\r\n            [theme.breakpoints.down('laptop')]: {\r\n                width: '33.33%'\r\n            },\r\n            [theme.breakpoints.down('tablet')]: {\r\n                width: '50%'\r\n            },\r\n            // mx: 'auto',\r\n            // my: 0,\r\n            margin: 1\r\n            // minHeight: '110vh'\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default postsStyles","import React, {useState} from \"react\";\r\n\r\n\r\nexport default function useAnchorEl () {\r\n\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return {\r\n        anchorEl,\r\n        setAnchorEl,\r\n        isAnchorEl: Boolean(anchorEl),\r\n        handleClick,\r\n        handleClose\r\n    }\r\n}"],"names":["theme","backdrop","display","alignItems","justifyContent","wrapper","bgcolor","mx","py","px","flexDirection","minHeight","borderRadius","title","color","palette","text","standard","textAlign","my","wordBreak","form","width","label","submitButton","alignSelf","mt","isFunction","any","closeModal","isModalOpen","onCreate","refetch","postId","extendedCollectionsApi","createCollection","isCollectionCreatingLoading","isLoading","useForm","resolver","yupResolver","collectionValidationSchema","mode","register","resetForm","reset","handleSubmit","formState","errors","titleError","tagsError","tags","navigate","useNavigate","onSubmit","formattedTags","split","createNewUserCollection","body","unwrap","response","data","collection","_id","styles","useSx","createCollectionStyles","t","useShortTranslation","componentNameKey","titleLabel","message","tagsLabel","StandardHelmet","keyOfTitle","Modal","open","onClose","sx","Container","maxWidth","MiniLoader","withMeta","IconButton","onClick","Close","Typography","variant","style","InputLabel","htmlFor","error","OutlinedInput","fullWidth","id","Button","type","useTheme","isSmallerThanLaptop","useMediaQuery","breakpoints","down","isSmallerThanTablet","isSmallerThanMobile","postItem","opacity","postItemWrapper","position","filter","image","backgroundColor","primary","main","postTopButtonsWrapper","padding","top","right","zIndex","postBottomButtonsWrapper","transform","light","postItemTitleWrapper","pb","whiteSpace","pl","pr","authorAvatar","height","authorUsername","ml","StyledNavLink","styled","NavLink","PostItemBottomButtonsWrapper","onToggleLike","isLiked","likesCount","postItemStyles","Box","className","Favorite","FavoriteBorder","PostItemTitle","authorId","avatarURL","username","showAuthor","to","mb","Avatar","src","post","postsActions","useState","setIsModalOpen","toggleLike","toggleSave","updateSavesInfo","author","postImageURL","isSaved","isSomewhereSaved","savesInfo","avatar","join","CreateCollectionModal","ImageListItem","alt","loading","role","decoding","PostSavesInfo","collections","openModal","ImageListItemBar","posts","useMediaQueries","postsListCols","columns","Array","from","length","postsStyles","sortedPostsForMasonryList","columnsLength","array","result","column","columnItem","push","sortItemsForMasonryList","map","_","index","postsLengthInOneColumn","Math","round","slicedPosts","slice","ImageList","postsList","gap","cols","openMenuButton","menuList","maxHeight","menuItem","menuItemButton","staticButtonsWrapper","bottom","useAnchorEl","anchorEl","isAnchorEl","handleClick","handleClose","postSavesInfoStyles","undefined","BookmarkAdded","BookmarkBorder","Menu","MenuListProps","collectionId","postActionLabel","MenuItem","onToggleSave","ListItemText","mr","container","errorContainer","margin","setAnchorEl","Boolean","event","currentTarget"],"sourceRoot":""}